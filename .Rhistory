ncol = 2, byrow = TRUE)
expect_equal(get_switch_points_matrix(R), exp_mat)
})
test_that("switch point matrix is correct. Start 1, even switches", {
# switch points should be 2 3 4 5.
R <- c(1, 0, 1, 0, 1, 0)
exp_mat <- matrix(c(1, 2,
3, 4,
5, 6), # 6 is the last time point
ncol = 2, byrow = TRUE)
expect_equal(get_switch_points_matrix(R), exp_mat)
})
test_that("switch point matrix is correct. Start 0, uneven switches", {
# switch points should be 2 3 4.
R <- c(0, 1, 0, 1, 1, 1)
exp_mat <- matrix(c(2, 3,
4, 6), # 6 is the last time point
ncol = 2, byrow = TRUE)
expect_equal(get_switch_points_matrix(R), exp_mat)
})
test_that("switch point matrix is correct. Start 0, even switches", {
# switch points should be 2 3 4 5.
R <- c(0, 1, 0, 1, 0, 0)
exp_mat <- matrix(c(2, 3,
4, 5),
ncol = 2, byrow = TRUE)
expect_equal(get_switch_points_matrix(R), exp_mat)
})
test_that("plot function does not return", {
z <- z_sim(n_t = 50, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(sim$data)
expect_equal(plot(sim), NULL)
expect_equal(plot(fit), NULL)
})
check()
devtools::check()
?graphics.off
devtools::load_all(".")
check()
devtools::check()
graphics.off()
library(devtools)
usethis::use_vignette("hystar")
vignette("hystar", "hystar")
devtools::load_all(".")
vignette("hystar", "hystar")
?vignette
vignette("hystar")
vignette("hystar")
vignettes("pivoting", "tidyr")
vignette("pivoting", "tidyr")
vignette("Pivoting", "tidyr")
vignette("linking", package = "pkgdown")
file.exists("CRAN-SUBMISSION")
?arima
Sys.getenv()
session_info()
knitr::opts_chunk
usethis::use_pkgdown_github_pages()
?gh_token_help
gh_token_help()
create_github_token()
usethis::use_pkgdown_github_pages()
gitcreds::gitcreds_set()
gh_token_help()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
?hystar_fit
devtools::load_all(".")
document()
devtools::load_all(".")
document()
usethis::use_logo()
usethis::use_logo(img = "hystar_logo.png")
usethis::use_logo(img = "hystar_logo.png")
devtools::load_all(".")
devtools::load_all(".")
document()
check()
check()
usethis::use_version()
library(pkgdown)
?buid_reference
?build_reference
usethis::use_news_md()
?z_sim
?hystar_sim
usethis::use_version()
?hystar_fit
devtools::load_all(".")
document()
usethis::use_readme_rmd()
usethis::use_github_action("render-rmarkdown")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
control_variable <- z_sim(n_t = 100)
simulated_hystar_model <- hystar_sim(z = z)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(hystar)
control_variable <- z_sim(n_t = 100)
simulated_hystar_model <- hystar_sim(z = z)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(hystar)
control_variable <- z_sim(n_t = 100)
simulated_hystar_model <- hystar_sim(z = control_variable)
fitted_hystar_model <- hystar_fit(data = simulated_hystar_model$data)
summary(fitted_hystar_model)
package_version("hystar")
package_version()
?package_version
packageVersion("hystar")
?z_sim
devtools::load_all(".")
devtools::install_github("daandejongen/hystar")
usethis::use_coverage()
use_github_action("test-coverage")
build_readme()
test_coverage()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
document()
?session_info
?sessionInfo
sessionInfo
sessionInfo()
browseURL("https://www.r-project.org")
?hystar
?browseURL
getOption("browser")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
hystar_info()
hystar_info()
print_welcome_message()
devtools::load_all(".")
print_welcome_message()
devtools::load_all(".")
print_welcome_message()
devtools::load_all(".")
hystar_info()
print_welcome_message()
library(devtools)
devtools::load_all(".")
print_welcome_message()
hystar_info()
devtools::load_all(".")
plot(hystar_sim(z_sim()))
?packageStartupMessage
devtools::load_all(".")
devtools::load_all(".")
hystar_info()
devtools::load_all(".")
?hystar_fit
?message
?Sys.sleep
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data, d = 1:10)
hystar_fit(hystar_sim(z_sim())$data, d = 1:5)
hystar_fit(hystar_sim(z_sim())$data, d = 1:5)
hystar_fit(hystar_sim(z_sim())$data, d = 1:10)
hystar_fit(hystar_sim(z_sim())$data, d = 1:10)
hystar_fit(hystar_sim(z_sim())$data, d = 1:6)
hystar_fit(hystar_sim(z_sim())$data, d = 1:7)
hystar_fit(hystar_sim(z_sim())$data, d = 1:8)
hystar_fit(hystar_sim(z_sim())$data, d = 1:9)
hystar_fit(hystar_sim(z_sim())$data, d = 1:10)
hystar_fit(hystar_sim(z_sim())$data, d = 1:11)
time_eff(1:100, 10, 2, 2)
create_x(hystar_sim(z_sim())$data$y, time_eff(1:100, 10, 2, 2), 1, 1)
hystar_fit(hystar_sim(z_sim())$data, p0 = 1:10)
hystar_fit(hystar_sim(z_sim())$data, p0 = 1:9)
hystar_fit(hystar_sim(z_sim())$data, p0 = 1:8)
hystar_fit(hystar_sim(z_sim())$data, p0 = 1:7)
hystar_fit(hystar_sim(z_sim())$data, p0 = 1:6)
hystar_fit(hystar_sim(z_sim())$data, p0 = 1:5)
hystar_fit(hystar_sim(z_sim(200))$data, p0 = 1:6)
hystar_fit(hystar_sim(z_sim(500))$data, d = 1:11)
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:6)
?try
Inf
Inf >1000
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:)
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
(1)[ , 1, drop = TRUE]
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
?withCallingHandlers
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, p0 = 1:7)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
?message
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
?txtProgressBar
txtProgressBar
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
devtools::load_all(".")
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(150))$data, d = 1:6)
hystar_fit(hystar_sim(z_sim(150))$data, p0 = 1:5, p1 = 1:5)
hystar_fit(hystar_sim(z_sim(500))$data, p0 = 1:2, p1 = 1:2)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(200))$data, p1 = 1:2)
stringi::stri_escape_unicode(ðŸŽ‰)
stringi::stri_escape_unicode("ðŸŽ‰")
document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
check(
)
devtools::load_all(".")
"
__            __
/ /_ __ ______/ /_________
/ _  / // (_ -/  _/ _  / __\
/_//_/\_, /___)\__/\_,_/_/
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)
hystar_fit(hystar_sim(z_sim(300))$data, d = 3)
hystar_fit(hystar_sim(z_sim(300))$data, d = 1:3)
?hystar
hystar_fit(hystar_sim(z_sim(300))$data, d = 1:3)$ic
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, d = 1:3)$ic
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, d = 1:3)$ic
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim(50))$data, d = 1:3)$ic
check()
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)
devtools::load_all(".")
?invisible
test()
check()
document()
?hystar_info
?hystar
devtools::load_all(".")
check()
check()
hystar_fit(hystar_sim(z_sim()$data)
)
hystar_fit(hystar_sim(z_sim())$data)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)
hystar_fit(hystar_sim(z_sim())$data)$ic
usethis::use_version()
?match.arg
choices <- c("aic", "aicc", "bic", "aiccp")
match.arg("a", choices)
match.arg("aic", choices)
match.arg("b", choices)
?hystar_fit
document()
library(devtools)
document()
?hystar_fit
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(data.frame(y = 1:10, z = 1:10), p_select = 1),
"character")
expect_error(hystar_fit(data.frame(y = 1:10, z = 1:10), p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE, tar = FALSE
)
expect_equal(p_select, "aic")
})
library(testthat)
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(data.frame(y = 1:10, z = 1:10), p_select = 1),
"character")
expect_error(hystar_fit(data.frame(y = 1:10, z = 1:10), p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE, tar = FALSE
)
expect_equal(p_select, "aic")
})
test_that("tar must be TRUE or FALSE", {
expect_error(hystar_fit(data.frame(1, 1), tar = 1), "TRUE or FALSE")
})
hystar_fit(data.frame(1, 1), tar = 1)
data.frame(1, 1)
data.frame(1, 1)[, 2]
unique(data.frame(1, 1)[, 2])
hystar_fit(data.frame(1, 1), tar = 1)
hystar_fit(data.frame(1, 1))
check_data(data.frame(1, 1))
data = data.frame(1, 1)
if (missing(data))
stop(paste0("Argument `data` is missing, with no default."), call. = FALSE)
if (is.vector(data)) {
data <- matrix(rep(data, times = 2), ncol = 2, byrow = FALSE)
}
if (is.data.frame(data)) {
data <- as.matrix(data)
}
if (!is.matrix(data))
stop(paste0("`data` should be a vector, matrix or data.frame. ",
"You provided an object of class ", class(data)),
call. = FALSE)
data <- data[, c(1, 2)]
data
data.frame(1, 1)
data <- data.frame(1, 1)
data <- data[, c(1, 2), drop = FALSE]
data
devtools::load_all(".")
test_that("tar must be TRUE or FALSE", {
expect_error(hystar_fit(data.frame(1, 1)), "TRUE or FALSE")
})
hystar_fit(data.frame(1, 1))
test_that("tar must be TRUE or FALSE", {
expect_error(check_tar(2), "TRUE or FALSE")
})
coverage()
library(covr)
coverage()
?covr
covr()
code_coverage()
package_coverage()
devtools::load_all(".")
package_coverage()
devtools::load_all(".")
plot(hystar_fit(hystar_sim(z_sim())$data)
)
(1:10)[[c(4, 5)]]
(1:10)[[2]]
a <- c(b = 4, c = 5)
a[["b"]]
devtools::load_all(".")
plot(hystar_fit(hystar_sim(z_sim())$data))
devtools::load_all(".")
plot(hystar_fit(hystar_sim(z_sim())$data))
devtools::load_all(".")
plot(hystar_fit(hystar_sim(z_sim())$data), name_regime0 = "margo")
plot(hystar_fit(hystar_sim(z_sim())$data), name_regime0 = "margo", color_regime1 = "red")
?call
body(hystar_fit)
lm(x ~ y, data = matrix(rnorm(100), nrow = 50))
lm(x ~ y, data = data.frame(x = rnorm(100), y = rnorm(100)))
lm
?match.call
test <- function(a, b) {
return(match.call())
}
test(a = 4, b = 5)
a <- test(a = 4, b = 5)
class(a)
print(a)
test <- function(a, b = 4) {
return(match.call())
}
a <- test(a = 4)
a
lm
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)
hystar_fit(hystar_sim(z_sim())$data)$call
devtools::load_all(".")
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)$call
hystar_fit(hystar_sim(z_sim())$data)
devtools::load_all(".")
hystar_fit(hystar_sim(z_sim())$data)
?eval
?quote
a <- hystar_fit(hystar_sim(z_sim())$data)$call
a
cat(a)
print(a)
cat(as.character(a))
devtools::load_all(".")
a <- hystar_fit(hystar_sim(z_sim())$data)
a
a <- hystar_fit(hystar_sim(z_sim())$data)$call
a
quote(a)
cat(quote(a))
cat(enquote(a))
lm
print.lm
lm.print
cat(enquote(a))
enquote(a)
substitute(a)
?deparse
devtools::load_all(".")
a <- hystar_fit(hystar_sim(z_sim())$data)$call
a <- hystar_fit(hystar_sim(z_sim())$data)
a
a <- hystar_sim(z_sim())
a
devtools::load_all(".")
document()
?plot.hystar_fit
document()
?plot.hystar_fit
?plot
devtools::load_all(".")
plot(hystar_sim(z_sim()))
devtools::load_all(".")
test_that("plot function does not return", {
z <- z_sim(n_t = 50, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(sim$data)
expect_equal(plot(sim), NULL)
expect_equal(plot(fit), NULL)
})
sim <- hystar_sim(z_sim())
hystar_sim(sim$data$y)
hystar_fit(sim$data$y)
plot(sim)
fit <- hystar_fit(sim$data$y)
plot(fit)
check()
usethis::use_package_doc()
devtools::load_all(".")
document()
vignette()
library(devtools)
devtools::load_all(".")
?apply
?lapply
?replicate
vignette
clean_vignettes()
devtools::load_all(".")
check()
test_active_file()
hystar_info()
hystar_fit(hystar_sim(z_sim())$data)
control_variable <- z_sim(n_t = 100)
simulated_hystar_model <- hystar_sim(z = control_variable)
fitted_hystar_model <- hystar_fit(data = simulated_hystar_model$data)
summary(fitted_hystar_model)
?knitr
packageVersion("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
detach("package:knitr", unload = TRUE)
detach("package::knitr", unload = TRUE)
packageVersion("xfun")
search()
update.packages(ask = FALSE, checkBuilt = TRUE)
