z_r[]
test_that("z buffer is correctly removed, d > p.", {
z <- z_sim(n_t = 50, n_switches = 3, start_regime = 1, start_hyst = TRUE)
z_r <- remove_z_buffer(z, d = 3, p0 = 1, p1 = 2)
expect_equal(z_r[1], 0)
expect_equal(z_r[1:50], z[11:60])
})
devtools::load_all(".")
test()
check()
devtools::load_all(".")
check()
?z_sim
devtools::load_all(".")
check()
hystar_sim(z = 1:100, r = c(5, 76), d = 1, phi_R0 = c(0, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01), phi_R1 = 0)
?z_sim
?hystar_sim
sim
z
sim <- hystar_sim(z = z, r = c(-.5, .5), phi_R0 = c(0, .4), phi_R1 = 1)
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(0, .4), phi_R1 = 1)
plot(sim)
plot(sim)
?layout
devtools::load_all(".")
plot(sim)
?hystar_fit
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
summary(dit)
summary(fit)
fit(fit)
fit
devtools::load_all(".")
summary(fit)
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
summary(fit)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
summary(fit)
fit$orders
fit$delay
sim$d
fit <- hystar_fit(y = sim$data$y)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y)
devtools::load_all(".")
devtools::load_all(".")
hystar_sim(z = 1)
hystar_sim(z = 1, phi_r0 = 3)
hystar_sim(z = 1, phi_r0 = 1)
hystar_sim(z = 1:10, r = c(3, 5))
hystar_sim(z = 1:10, r = c(3, 5), phi_R0 = 4)
hystar_sim(z = 1:10, r = c(3, 5), phi_R0 = 4, phi_R1 = 1)
hystar_sim(z = 1:10, r = c(3, 5), phi_R0 = 4, phi_R1 = 1, d = 1)
hystar_fit(z = 4)
check()
install()
?hystar_sim
devtools::load_all(".")
z <- z_sim(n_t = 50, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
(plot(sim)
)
plot(sim)
plot(2)
devtools::load_all(".")
plot(sim)
plot(2)
par(mfrow = c(2, 2))
plot(2)
par(mfrow = c(1,1))
plot(2)
?hystar_fit
?z_sim
z <- z_sim(100, n_switches = 4, start_regime = 1, start_hyst = FALSE)
ts.plot(z)
?hystar_sim
str(z)
?hystar_fit
?z_sim
# Simulation
z <- z_sim(100, 5, 1, TRUE)
ts.plot(z)
?hystar_sim
sim <- hystar_sim(z, r = c(-.5, .5),
phi_R0 = c(0, .3),
phi_R1 = c(-1, .6))
sim <- hystar_sim(z, r = c(-.5, .5),
phi_R0 = c(0, .3),
phi_R1 = c(-1, .6),
d = 1)
plot(sim)
plot(sim)
?hystar_fit
# Estimation
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
# Results
summary(fit)
coef(fit)
coef(fit)
plot(fit)
sim <- hystar_sim(z, r = c(-.5, .5),
phi_R0 = c(0, .3),
phi_R1 = c(0, .6),
d = 1,
resvar = c(.5, 1.5))
plot(sim)
sim <- hystar_sim(z, r = c(-.5, 0),
phi_R0 = c(0, .3),
phi_R1 = c(0, .6),
d = 1,
resvar = c(.5, 1.5))
plot(sim)
plot(sim)
acov_vec = 1:6
# This function will return the matrix
# E[x_t x_t^T]
# where x_t = (1, y[t-1], ..., y[t-p])
n <- length(acov_vec) + 1L
n
A <- matrix(raw(), nrow = n, ncol = n)
A
?raw
raw(10)
M <- matrix(acov_vec[abs(col(A) - row(A)) + 1L], n, n)
M
col(A)
row(A)
A[2:n, 2:2]
A <- matrix(raw(), nrow = n, ncol = n)
A[2:n, 2:n]
(1:6)[abs(col(A) - row(A)) + 1]
(1:6)[abs(col(A) - row(A))]
(1:4)[abs(col(A) - row(A))]
A <- matrix(raw(), nrow = 4, ncol = 4)
(1:4)[abs(col(A) - row(A))]
(1:4)[abs(col(A) - row(A))] + 1
(1:4)[abs(col(A) - row(A)) + 1]
col(A)
A
A[] <- 1:16
A <- matrix(NA, 4, 4)
A
A[] <- 1:16
A
A <- matrix(nrow = n, ncol = n)
acov_vec <- 1:4
A[] <- acov_vec[abs(col(A) - row(A)) + 1L]
A
A
A <- matrix(nrow = n, ncol = n)
A[] <- acov_vec[abs(col(A) - row(A)) + 1L]
A
A <- matrix(nrow = n, ncol = n)
acov_vec[abs(col(A) - row(A)) + 1L]
A
n=4
A <- matrix(nrow = n, ncol = n)
A
A[] <- acov_vec[abs(col(A) - row(A)) + 1L]
A
?mean
?arima.sim
y <- arima.sim(list(ar = c(0, .4)))
y <- arima.sim(list(ar = c(0, .4)), n = 100)
devtools::load_all(".")
compute_acov_vec(y, 4)
co <- compute_acov_vec(y, 4)
acf(y, 4)
acf(y, 4, plot = FALSE, tyope = "cova")
acf(y, 4, plot = FALSE, tyope = "covariaance")
acf(y, 4, plot = FALSE, tyope = "covariance")
acf(y, 4, plot = FALSE, type = "covariance")
co
var(y)
var(y) * 99 / 100
y
# This function will return the (p+1) by (p+1) matrix
# 1 m m m m
# m E[x_t x_t^T]
# m
# m
#
# where x_t = (x_{t-1}, x_{t-2}, ..., x_{t-p})
# and m is the mean of y
m <- mean(y)
acov_vec = compute_acov_vec(y, 4)
# Inner lower right part of the matrix, E[x_t x_t^T]
# note that acov_vec contains the autocovs of lag 0, 1, ..., p - 1.
p <- length(acov_vec)
p
A <- matrix(nrow = p, ncol = p)
A[] <- acov_vec[abs(col(A) - row(A)) + 1L] + m**2
A
acov_vec
m
y <- arima.sim(list(ar = c(2, .4)), n = 100)
?arima.sim
y <- y + 1
# This function will return the (p+1) by (p+1) matrix
# 1 m m m m
# m E[x_t x_t^T]
# m
# m
#
# where x_t = (x_{t-1}, x_{t-2}, ..., x_{t-p})
# and m is the mean of y
m <- mean(y)
m
acov_vec = compute_acov_vec(y, 4)
# Inner lower right part of the matrix, E[x_t x_t^T]
# note that acov_vec contains the autocovs of lag 0, 1, ..., p - 1.
p <- length(acov_vec)
A <- matrix(nrow = p, ncol = p)
A[] <- acov_vec[abs(col(A) - row(A)) + 1L] + m**2
A
acov_vec
# Outer part
M <- matrix(NA, nrow = p + 1, ncol = p + 1)
M[1, 1:(p + 1)] <- M[1:(p + 1), 1] <- c(1, rep(m, times = p))
M
# Filling inner part in outer part
M[2:(p + 1), 2:(p + 1)] <- A
M
install()
library(devtools)
install()
devtools::load_all(".")
?any
sim
z <- z_sim(100, 3, 1)
devtools::load_all(".")
library(devtools)
check()
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
library(testthat)
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
devtools::load_all(".")
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
library(devtools)
devtools::load_all(".")
z <- z_sim(500, 8, 0, F)
s <- hystar_sim(z = z, r = c(-.3, .3), d = 1, c(0, .4), c(2, .7))
plot(s)
z <- z_sim(200, 20, 0, F)
s <- hystar_sim(z = z, r = c(-.3, .3), d = 1, c(0, .4), c(2, .7))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z)
summary(fit)
s$data$R
z <- z_sim(200, 40, 0, F)
s <- hystar_sim(z = z, r = c(-.3, .3), d = 1, c(0, .4), c(2, .7))
fit <- hystar_fit(y = s$data$y, z = s$data$z)
summary(fit)
plot(fit)
plot(fit)
?combn
?perm
devtools::load_all(".")
get_inter_means(1:10)
x = 1:10
n <- length(x)
n
lag_mat
lag_mat <- matrix(c(x[1:(n - 1)], x[2:n]), nrow = 2, byrow = TRUE)
lag_mat
devtools::load_all(".")
get_inter_means(1:10)
test_that("search grid for r is correct", {
z <- 1:3
grid_r_actual <- create_grid_r(z, r = c(0, 1), thin = FALSE)
grid_r_expected <- matrix(c(1, 2,
1, 3,
2, 3,
1, 1,
2, 2,
3, 3),
ncol = 2, byrow = TRUE)
expect_equal(grid_r_actual, grid_r_expected)
})
devtools::load_all(".")
test_that("search grid for r is correct", {
z <- 1:3
grid_r_actual <- create_grid_r(z, r = c(0, 1), thin = FALSE)
grid_r_expected <- matrix(c(1, 2,
1, 3,
2, 3,
1, 1,
2, 2,
3, 3),
ncol = 2, byrow = TRUE)
expect_equal(grid_r_actual, grid_r_expected)
})
z <- 1:3
grid_r_actual <- create_grid_r(z, r = c(0, 1), thin = FALSE)
grid_r_actual
test_that("search grid for r is correct", {
z <- 1:3
grid_r_actual <- create_grid_r(z, r = c(0, 1), thin = FALSE)
grid_r_expected <- matrix(c(1.5, 2.5,
1.5, 1.5,
2.5, 2.5),
ncol = 2, byrow = TRUE)
expect_equal(grid_r_actual, grid_r_expected)
})
test_that("d is correctly added", {
grid <- matrix(nrow = 2, ncol = 2)
grid_d_expected <- cbind(rep(c(1, 3), each = 2),
matrix(nrow = 4, ncol = 2))
grid_d_actual <- add_d(d = c(1, 3), grid)
expect_equal(grid_d_actual, grid_d_expected)
})
test_that("starts are correct", {
y <- numeric(50)
r0 <- 2
r1 <- 4
# When delay is larger than max order
# (straightforward case, because you just look at first value of z)
d <- 4
eff <- time_eff(y, d, p0 = 1, p1 = 3) # returns 5, 6, ..., 50
expect_equal(object = get_start(c(d, r0, r1), z = c(1, 3, 3, 3, 1), eff),
expected = 0L)
expect_equal(object = get_start(c(d, r0, r1), z = c(5, 3, 5, 3, 1), eff),
expected = 1L)
expect_equal(object = get_start(c(d, r0, r1), z = c(3, 5, 5, 5, 5), eff),
expected = -1L)
# When delay is smaller than max order
# z contains observations at start that can inform about the first regime
d <- 1
eff <- time_eff(y, d, p0 = 1, p1 = 4) # returns 5, 6, ..., 50
expect_equal(object = get_start(c(d, r0, r1), z = c(1, 3, 3, 3, 3), eff),
expected = 0L)
# Start is immediately known
expect_equal(object = get_start(c(d, r0, r1), z = c(5, 3, 3, 1, 1), eff),
expected = 0L)
expect_equal(object = get_start(c(d, r0, r1), z = c(3, 3, 3, 3, 3), eff),
expected = -1L)
})
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, seq(2.5, 8.5, .5))
})
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, seq(2.5, 8.5, 1))
})
library(devtools)
check()
test_that("`z` must have at least three levels.", {
expect_error(hystar_fit(y = 1:10, z = c(rep(3, 5), rep(4, 5))))
})
hystar_fit(y = 1:10, z = c(rep(3, 5), rep(4, 5)))
devtools::load_all(".")
hystar_fit(y = 1:10, z = c(rep(3, 5), rep(4, 5)))
test_that("`z` must have at least three levels.", {
expect_error(hystar_fit(y = 1:10, z = c(rep(3, 5), rep(4, 5))),
"unique values")
})
1:10 / 2:11
devtools::load_all(".")
z <- z_sim(200, 4, 1)
sim <- hystar_sim(z = z, r = c(-.4, .4), d = 1, c(0, .5), c(1, .5), c(.5, 2))
fit <- hystar_fit(z = sim$data$z, y = sim$data$y)
plot(sim)
plot(fit)
summary(fit)
ts.plot(fit$residuals)
ts.plot(fit$residuals_st)
z <- z_sim(500, 4, 1)
sim <- hystar_sim(z = z, r = c(-.4, .4), d = 1, c(0, .3), c(1, .6), c(.5, 1))
fit <- hystar_fit(z = sim$data$z, y = sim$data$y)
summary(fit)
ts.plot(fit$residuals)
ts.plot(fit$residuals_st)
sd(fit$residuals_st)
var(fit$residuals_st)
?const
?hystar_fit
?plot
devtools::load_all(".")
devtools::load_all(".")
z <- z_sim(100, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(1, .2), phi_R1 = c(2, .5))
plot(s)
devtools::load_all(".")
z <- z_sim(100, 3, 1)
plot(s)
devtools::load_all(".")
plot(s)
devtools::load_all(".")
plot(s)
plot(s, main = "Daan")
devtools::load_all(".")
plot(s, main = "Daan")
devtools::load_all(".")
plot(s, main = "Daan")
devtools::load_all(".")
plot(s, main = "Daan")
plot(s)
devtools::load_all(".")
plot(s, main = "Daan")
devtools::load_all(".")
plot(s, main = "Daan")
devtools::load_all(".")
plot(s, main = "Daan")
plot(s, main = "Daan", ylab = "hahaha")
plot(s, main = "Daan", ylab = "hahaha")
devtools::load_all(".")
plot(s, main = "Daan", ylab = "hahaha")
devtools::load_all(".")
plot(s, main = "Daan", ylab = "hahaha")
devtools::load_all(".")
plot(s, main = "Daan", ylab = "hahaha")
devtools::load_all(".")
plot(s, main = "Daan", ylab = "hahaha")
devtools::load_all(".")
plot(s, main = "Daan", ylab = "hahaha")
devtools::load_all(".")
plot(s, main = "Daan", ylab = "hahaha")
plot(s, main = "Daan", ylab = c("hahaha", "hihihi"))
plot(s, main = "Daan", ylab = c("hahaha", "hihihi"), xlab = "nounounou")
devtools::load_all(".")
plot(s, main = "Daan", ylab = c("hahaha", "hihihi"), xlab = "nounounou")
plot(s, main = "Daan", ylab = c("hahaha", "hihihi"), xlab = "nounounou", regime_names = c("A", "b"))
devtools::load_all(".")
library(devtools)
check()
devtools::load_all(".")
test_active_file()
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 1:10, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 1:10, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
devtools::load_all(".")
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1:10, z = 1:10, p_select = 1),
"character")
expect_error(hystar_fit(y = 1:10, z = 1:10, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
check()
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
devtools::load_all(".")
check()
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
check()
library(devtools)
devtools::load_all(".")
check()
install()
