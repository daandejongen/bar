phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
document()
library(devtools)
document()
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
H
sim
ts_reg(H)
ts_reg(sim)
ts_reg(sim, 0)
get_regimes(H)
get_regimes(sim)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
sim
document()
devtools::load_all(".")
?document
sapply(sim$data, length)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
sim
simulate_z(c(1, 3), 200, 4, 0)
simulate_z(c(1, 3), 200, 4, 5)
r = c(1, 3)
length = 100
n_switches = 5
start_regime = 1
dist <- r[2] - r[1]
max  <- r[2] + dist
min  <- r[1] - dist
dist
max
min
# We start and end in the middle of the hysteresis zone.
z <- numeric(length)
z[1] <- mean(c(r[1], r[2]))
z[length(z)] <- z[1]
z
length(z)
sw_pnts <- get_sw_pnts(length, n_switches)
sw_pnts
# At the returning points, z goes from increasing back to
# decreasing or the other way around. At these points,
# 'z' takes on the maximum or the minimum.
# We want the first switch to happen as soon as possible,
# so if start is 0, we have to go to a return point at the max
# (since then the switch happens at crossing r1).
ret_pnts <- get_ret_pnts(length, n_switches)
get_ret_pnts <- function(length, n_switches) {
sw_space <- length %/% (n_switches + 1)
sw_pnts  <- sw_space * 1:n_switches
max_noise <- sw_space %/% (length %/% 50)
noise <- sample(-max_noise:max_noise, size = n_switches, replace = TRUE)
return(sw_pnts + noise)
}
# At the returning points, z goes from increasing back to
# decreasing or the other way around. At these points,
# 'z' takes on the maximum or the minimum.
# We want the first switch to happen as soon as possible,
# so if start is 0, we have to go to a return point at the max
# (since then the switch happens at crossing r1).
ret_pnts <- get_ret_pnts(length, n_switches)
alternate <- if (start_regime == 0) c(max, min) else c(min, max)
ret_pnts
get_ret_pnts <- function(length, n_switches) {
# Returns the time indices where 'z' should turn.
space <- length %/% (n_switches + 1)
pnts  <- space * 1:n_switches
max_noise <- space %/% (length %/% 50)
noise <- sample(-max_noise:max_noise, size = n_switches, replace = TRUE)
return(pnts + noise)
}
# At the returning points, z goes from increasing back to
# decreasing or the other way around. At these points,
# 'z' takes on the maximum or the minimum.
# We want the first switch to happen as soon as possible,
# so if start is 0, we have to go to a return point at the max
# (since then the switch happens at crossing r1).
ret_pnts <- get_ret_pnts(length, n_switches)
alternate <- if (start_regime == 0) c(max, min) else c(min, max)
z[ret_pnts] <- rep_len(alternate, length.out = n_switches)
ret_pnts
alternate
z
length(z)
# Here I create a matrix with two columns containing the
# from and to time points and two columns containing the
# from and to z values. To this matrix the 'cross' function
# is applied to get the connections between the froms and tos.
x <- c(1, ret_pnts, ret_pnts, length(z))
y <- z[x]
mat <- matrix(c(x, y), ncol = 4, byrow = FALSE)
x
y <- z[x]
mat <- matrix(c(x, y), ncol = 4, byrow = FALSE)
mat
start_regime
apply(X = mat, MARGIN = 1, FUN = cross)
W <- apply(X = mat, MARGIN = 1, FUN = cross)
W[[1]][2] - W[[1]][2]
W[[1]][2] - W[[1]][1]
W[[2]]][1] - W[[1]][19]
W[[2]][1] - W[[1]][19]
apply(W, length)
sapply(W, length)
sum(sapply(W, length))
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 4)
data <- sim$data
sapply(data, length)
# Estimating the model
fit <- barfit(y = sim$data$y,
z = sim$data$z,
d = 3,
p0 = 1,
p1 = 1,
r = c(.1, .9))
sapply(fit$data, length)
devtools::load_all(".")
# Estimating the model
fit <- barfit(y = sim$data$y,
z = sim$data$z,
d = 3,
p0 = 1,
p1 = 1,
r = c(.1, .9))
devtools::load_all(".")
fit
?rect
8 %% 2
matrix(1:5, nrow = 2, ncol = 2)
matrix(1:5, ncol = 2)
10 %% 2
10 %/% 2
a <- 1:5
a[3==3]
a[-(3==3)]
a[-TRUE]
a[-1]
n <- length(a)
uneven <- ln %% 2 != 0
sw_pnts <- a[-(n * uneven)]
n <- length(a)
uneven <- n %% 2 != 0
sw_pnts <- a[-(n * uneven)]
sw_pnts
devtools::load_all(".")
plot(sim$data)
R = sim$data$R
R
sw_pnts <- get_sw_pnts(R)
sw_pnts
colors <- c("white", col_reg1)
colors <- c("white", "grey")
# We want to always draw rectangles from 1 to 2, 3 to 4, ...
# so the rectangle color is the color of on the starting regime
# and we chose the background color the opposite color.
rect_col <- colors[R[1]]
bg_col   <- colors[1 - R[1]]
# We delete the last sw_point if there are an uneven number of them.
# We put them in a matrix (by row) to have a from and a to column.
n <- length(sw_pnts)
n
?which
which(c(T, T, F, F))
get_sw_pnts <- function(R) {
# Where are switches from 0 (1) to 1 (0)?
# We use the lagged version of R, so we add the original
# start again.
n <- length(R)
sw_pnts <- c(FALSE, R[2:n] - R[1:(n-1)] != 0)
return(which(sw_pnts))
}
sw_pnts <- get_sw_pnts(R)
# We delete the last sw_point if there are an uneven number of them.
# We put them in a matrix (by row) to have a from and a to column.
n <- length(sw_pnts)
n
sw_pnts
uneven <- n %% 2 != 0
uneven
sw_pnts_mat <- matrix(sw_pnts[-(n * uneven)], ncol = 2, byrow = TRUE)
sw_pnts_mat
sw_pnts
-(n * uneven)
sw_pnts_mat <- matrix(sw_pnts[1:(n-uneven)], ncol = 2, byrow = TRUE)
sw_pnts_mat
sw_pnts <- c(sw_pnts, 992)
# We delete the last sw_point if there are an uneven number of them.
# We put them in a matrix (by row) to have a from and a to column.
n <- length(sw_pnts)
uneven <- n %% 2 != 0
sw_pnts_mat <- matrix(sw_pnts[1:(n-uneven)], ncol = 2, byrow = TRUE)
sw_pnts_mat
ybottom <- rep(min, times = n - uneven)
ytop <- rep(max, times = n - uneven)
ybottom
ytop
rect(1, min, length(R), max,
col = bg_col, border = NA)
rect(sw_pnts_mat[, 1], ybottom, sw_pnts_mat[, 2], ytop,
col = rect_col, border = NA)
devtools::load_all(".")
plot(sim$data)
a <- 3
b <- list(a)
b
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
rect_reg(R, 0, 5, "black")
R
rect_bg(R, "grey50", 0, 5)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
max(sim$z)
max(sim$data$z)
min(sim$data$z)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
R
sim$dat$R
rect_reg(R, -1, 1, "blue")
rect_reg <- function(R, col_reg1, min, max) {
sw_pnts <- get_sw_pnts(R)
# We want to always draw rectangles from 1 to 2, 3 to 4, ...
# so the rectangle color is the color of on the starting regime
# and we chose the background color the opposite color.
rect_col <- c("white", col_reg1)[R[1]]
return(rect_col)
# We delete the last sw_point if there are an uneven number of them.
# We put them in a matrix (by row) to have a from and a to column.
n <- length(sw_pnts)
uneven <- n %% 2 != 0
sw_pnts_mat <- matrix(sw_pnts[1:(n-uneven)], ncol = 2, byrow = TRUE)
ybottom <- rep(min, times = n - uneven)
ytop <- rep(max, times = n - uneven)
rect(sw_pnts_mat[, 1], ybottom, sw_pnts_mat[, 2], ytop,
col = rect_col, border = NA)
}
rect_reg(R, -1, 1, "blue")
R[1]
c("white", "sda")[1]
devtools::load_all(".")
plot(sim$data)
rect_reg(R, -1, 1, "blue")
R[1]
rect_reg <- function(R, col_reg1, min, max) {
sw_pnts <- get_sw_pnts(R)
# We want to always draw rectangles from 1 to 2, 3 to 4, ...
# so the rectangle color is the color of on the starting regime
# and we chose the background color the opposite color.
rect_col <- c(col_reg1, "white")[2 - R[1]]
return(rect_col)
# We delete the last sw_point if there are an uneven number of them.
# We put them in a matrix (by row) to have a from and a to column.
n <- length(sw_pnts)
uneven <- n %% 2 != 0
sw_pnts_mat <- matrix(sw_pnts[1:(n-uneven)], ncol = 2, byrow = TRUE)
ybottom <- rep(min, times = n - uneven)
ytop <- rep(max, times = n - uneven)
rect(sw_pnts_mat[, 1], ybottom, sw_pnts_mat[, 2], ytop,
col = rect_col, border = NA)
}
rect_reg(R, -1, 1, "blue")
c("blue", "white")[2 - R[1]]
rect_reg(R, -1, 1, "blue")
devtools::load_all(".")
devtools::load_all(".")
plot(sim$data)
rect_reg(R, "blue", -8, 4)
rect_reg <- function(R, col_reg1, min, max) {
sw_pnts <- get_sw_pnts(R)
# We want to always draw rectangles from 1 to 2, 3 to 4, ...
# so the rectangle color is the color of on the starting regime
# and we chose the background color the opposite color.
rect_col <- c(col_reg1, "white")[2 - R[1]]
# We delete the last sw_point if there are an uneven number of them.
# We put them in a matrix (by row) to have a from and a to column.
n <- length(sw_pnts)
uneven <- n %% 2 != 0
sw_pnts_mat <- matrix(sw_pnts[1:(n-uneven)], ncol = 2, byrow = TRUE)
ybottom <- rep(min, times = n - uneven)
ytop <- rep(max, times = n - uneven)
return(sw_pnts_mat)
rect(sw_pnts_mat[, 1], ybottom, sw_pnts_mat[, 2], ytop,
col = rect_col, border = NA)
}
rect_reg(R, "blue", -8, 4)
rect_reg(R, "blue", -8, 4)[,1]
devtools::load_all(".")
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
rect_reg(R, "blue", -1, 1)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
?legend
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
?rect
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
par("usr")
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
devtools::load_all(".")
plot(sim$data)
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 2,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 10)
data <- sim$data
plot(data)
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 0,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 10)
data <- sim$data
class(data)
plot(data)
?legend
34.19-2.19-.69-7.49
?plot.default
plot.default
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
data
# Simulating data
sim <- barsim(r            = c(-.2, .3),
d            = 10,
phi          = c(0, .6),
psi          = c(0, -.3),
resvar       = c(1, .5),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 10)
data <- sim$data
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
lag_obs(1:10, 5, 2)
devtools::load_all(".")
lag_obs(1:10, 5, 2)
lag_obs(2:30, 5, 2)
lag_obs(25:30, 5, 2)
