r = c(-.5, .5), d = 2,
phi_R0 = c(0, .5),
phi_R1 = c(2, .1),
resvar = c(1, 1)
)
plot(sim, zlab = "test")
devtools::install()
# Examples for Bielefeld presentation
library(hystar)
z <- z_sim(
n_t = 500,
n_switches = 7,
start_regime = 0,
start_hys = FALSE,
range = c(-1, 1)
)
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 2,
phi_R0 = c(0, .5),
phi_R1 = c(2, .1),
resvar = c(1, 1)
)
plot(sim, zlab = "test")
plot(sim, ylab = "depresseion", zlab = "stress")
# First examples: simple and hysteretic switching
z <- z_sim(
n_t = 100,
n_switches = 5,
start_regime = 0,
start_hys = FALSE,
range = c(-1, 1)
)
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5),
phi_R1 = c(4, .5),
resvar = c(1, 1)
)
plot(sim, ylab = "depresseion", zlab = "stress")
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 0,
phi_R0 = c(0, .2),
phi_R1 = c(4, .2),
resvar = c(1, 1)
)
plot(sim, ylab = "depresseion", zlab = "stress")
plot(sim,
main = "Hysteretic switching",
ylab = "depresseion",
zlab = "stress")
sim <- hystar_sim(
z = z,
r = c(0, 0), d = 0,
phi_R0 = c(0, .2),
phi_R1 = c(4, .2),
resvar = c(1, 1)
)
plot(sim,
main = "Simple switching",
ylab = "depresseion",
zlab = "stress")
5.9 + 5.9/2 + 5.3
library(devtools)
devtools::load_all(".")
z <- z_sim(
n_t = 500,
n_switches = 7,
start_regime = 0,
start_hys = FALSE,
range = c(-1, 1)
)
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 2,
phi_R0 = c(0),
phi_R1 = c(2),
resvar = c(0, 0)
)
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 2,
phi_R0 = c(0),
phi_R1 = c(2),
resvar = c(0.001, 0.001)
)
plot(sim, ylab = "depresseion", zlab = "stress")
fit <- hystar_fit(
y = sim$data$y,
z = sim$data$z,
d = 1:4, p0 = 1, p1 = 1,
r = c(.2, .8))
summary(fit)
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 2,
phi_R0 = c(0),
phi_R1 = c(2),
resvar = c(0, 0)
)
devtools::load_all(".")
devtools::load_all(".")
sim <- hystar_sim(
z = z,
r = c(-.5, .5), d = 2,
phi_R0 = c(0),
phi_R1 = c(2),
resvar = c(0, 0)
)
plot(sim)
fit <- hystar_fit(
y = sim$data$y,
z = sim$data$z,
d = 1:4, p0 = 1, p1 = 1,
r = c(.2, .8))
devtools::load_all(".")
z <- z_sim(100, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = 0, phi_R1 = 2)
plot(sim)
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 0, p1 = 0)
fit
plot(fit)
?hystar_fit
devtools::load_all(".")
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 0, p1 = 0)
devtools::load_all(".")
summary(fit)
fit$coefficients
fit$orders
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
fit
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 0:1, p1 = 0:1)
dit
fit
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
fit$coefficients
aste0("R0_phi", 0:0)
paste0("R0_phi", 0:0)
devtools::load_all(".")
summary(fit)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 0, p1 = 0)
summary(fit)
fit
devtools::load_all(".")
summary(fit)
devtools::load_all(".")
summary(fit)
compute_SEs(y = fit$data$y[fit$eff], R = fit$data$R[fit$eff], rv = fit$resvar, p0 = 0, p1 = 0)
y = fit$data$y[fit$eff]
R = fit$data$R[fit$eff]
v = fit$resvar
rv = fit$resvar
p0 = 0
p1 =0
# From Li, Guan, Li and Yu (2015)
# We first need the autocovariance matrix up to order p.
S0 <- create_acov_mat(compute_acov_vec(y * (1L - R), p0), y)
y = y * (1L - R)
p  = 0
# Note that acov_vec contains the autocovs of lag 0, 1, ..., p - 1.
n <- length(y)
mean_y <- mean(y)
acov <- numeric(p)
mean_y
acov
for (i in 0:(p - 1)) {
y_    <- y[(i + 1):n] # delete first i obs from y
y_lag <- y[1:(n - i)] # delete last i obs from y
# Compute the autocovariance at lag i (note we always divide by n)
acov[i + 1] <- sum((y_ - mean_y) * (y_lag - mean_y)) / n
}
p = 1
for (i in 0:(p - 1)) {
y_    <- y[(i + 1):n] # delete first i obs from y
y_lag <- y[1:(n - i)] # delete last i obs from y
# Compute the autocovariance at lag i (note we always divide by n)
acov[i + 1] <- sum((y_ - mean_y) * (y_lag - mean_y)) / n
}
acov
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
summary(fit)
devtools::load_all(".")
summary(fit)
devtools::load_all(".")
plot(fit, show_legend = FALSE)
devtools::load_all(".")
plot(fit, show_legend = FALSE)
plot(fit, show_legend = TRUE)
plot(fit, show_legend = TRUE, zlab = "daan")
devtools::load_all(".")
y <- 1:10
compute_acov_vec(y, 3)
compute_acov_vec(y, 0)
compute_acov_vec(y, 1)
var(1:10)
create_acov_mat(compute_acov_vec(y, 1))
create_acov_mat(compute_acov_vec(y, 1), 1:10)
mean(1:10**2)
mean(1:10)**2
?acov
acf(1:10, 3)
?acf
acf(1:10, 3, type = "cov", plot = FALSE)
compute_acov_vec()
compute_acov_vec(1:10, 3)
for (i in seq_length(3)) print(i)
?seq
for (i in seq_len(3)) print(i)
for (i in seq_len(0)) print(i)
devtools::load_all(".")
compute_acov_vec(1:10, 0)
create_acov_mat(compute_acov_vec(1:10, 0), 1:10)
acov_vec = numeric(0)
y = 1:10
# This function will return the (p+1) by (p+1) matrix
# 1 m m m m
# m E[x_t x_t^T]
# m
# m
#
# where x_t = (x_{t-1}, x_{t-2}, ..., x_{t-p})
# and m is the mean of y
m <- mean(y)
# Inner lower right part of the matrix, E[x_t x_t^T]
# note that acov_vec contains the autocovs of lag 0, 1, ..., p - 1.
p <- length(acov_vec)
A <- matrix(nrow = p, ncol = p)
p
A
A[] <- acov_vec[abs(col(A) - row(A)) + 1L] + m**2
A
# Outer part
M <- matrix(NA, nrow = p + 1, ncol = p + 1)
M[1, 1:(p + 1)] <- M[1:(p + 1), 1] <- c(1, rep(m, times = p))
M
M
return(M)
create_acov_mat(acov_vec = compute_acov_vec(1:10), 1:10)
create_acov_mat(acov_vec = compute_acov_vec(1:10, 0), 1:10)
p
# Outer part
M <- matrix(NA, nrow = p + 1, ncol = p + 1)
M[1, 1:(p + 1)] <- M[1:(p + 1), 1] <- c(1, rep(m, times = p))
M
A
M[2:(p + 1), 2:(p + 1)]
# Filling inner part in outer part
M[2:(p + 1), 2:(p + 1)] <- A
devtools::load_all(".")
z <- z_sim(100, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = 0, phi_R1 = 2)
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 0, p1 = 0)
fit
summary(fit)
phi_R0 = c(0, .5), phi_R1 = c(2, .3)
phi_R0 = c(0, .5), phi_R1 = c(2, .3)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, .3))
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
fit
summary(fit)
fit
confint(fit)
devtools::load_all(".")
summary(fit)
z <- z_sim(100, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, .3))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
fit
summary(fit)
z <- z_sim(500, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, .3))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
fit
summary(fit)
plot(fit)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
fit
summary(fit)
3 - 6
devtools::load_all(".")
z <- z_sim(500, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1)
4.72 + 4.28 + 3.62 + 3.4 + 5.38
uTAR(y = s$data$y, p1 = 1, p2 = 1, thrV = s$data$z)
library(NTS)
uTAR(y = s$data$y, p1 = 1, p2 = 1, thrV = s$data$z)
res <- uTAR(y = s$data$y, p1 = 1, p2 = 1, thrV = s$data$z)
attributes(res)
res$thr
res$D
citation(packaga = "NTS")
citation(package = "NTS")
library(devtools)
devtools::load_all(".")
z <- z_sim(500, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1, tar = TRUE)
fit
summary(fit)
plot(fit)
fit2 <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1, tar = FALSE)
summary(fit2)
fit$ic
fit2$ic
check()
devtools::load_all(".")
fit <- hystar_fit(y = s$data$y, z = s$data$z,
r = matrix(c(-.3, -.3,
-.2, .1), nrow = 2, byrow = TRUE),
d = 0, p0 = 1, p1 = 1, tar = TRUE)
devtools::load_all(".")
fit <- hystar_fit(y = s$data$y, z = s$data$z,
r = matrix(c(-.3, -.3,
-.2, .1), nrow = 2, byrow = TRUE),
d = 0, p0 = 1, p1 = 1, tar = TRUE)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
r = matrix(c(-.3, -.3,
-.2, -.2), nrow = 2, byrow = TRUE),
d = 0, p0 = 1, p1 = 1, tar = TRUE)
fit <- hystar_fit(y = s$data$y, z = s$data$z,
r = matrix(c(-.3, -.3,
-.2, -.2), nrow = 2, byrow = TRUE),
d = 0, p0 = 1, p1 = 1, tar = TRUE)
devtools::load_all(".")
fit <- hystar_fit(y = s$data$y, z = s$data$z,
r = matrix(c(-.3, -.3,
-.2, -.2), nrow = 2, byrow = TRUE),
d = 0, p0 = 1, p1 = 1, tar = TRUE)
s
devtools::load_all(".")
devtools::load_all(".")
fit <- hystar_fit(y = s$data$y, z = s$data$z,
r = matrix(c(-.3, -.3,
-.2, -.2), nrow = 2, byrow = TRUE),
d = 0, p0 = 1, p1 = 1, tar = TRUE)
fit2 <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1, tar = FALSE)
fit
summary(fit)
devtools::load_all(".")
summary(fit)
fit2 <- hystar_fit(y = s$data$y, z = s$data$z,
d = 0, p0 = 1, p1 = 1, tar = FALSE)
summary(fit)
summary(fit2)
devtools::load_all(".")
summary(fit2)
coef(fit)
devtools::load_all(".")
plot(fit)
plot(fit2)
check()
hystar_sim(z = 1:10, r = c(2, 2), d = 1,
phi_R0 = 1, phi_R1 = 2
)
s
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
plot(s)
summary(s)
s <- hystar_sim(z = z, r = c(-.5, -.5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
devtools::load_all(".")
s
s <- hystar_sim(z = z, r = c(-.5, -.5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
plot(s)
s
test()
test_coverage()
check()
install()
plot(s, main = "lalala")
plot(s, main = "lalala")
plot(s)
devtools::load_all(".")
library(devtools)
devtools::load_all(".")
z <- z_sim(500, 3, 1)
s <- hystar_sim(z = z, r = c(-.5, -.5), d = 0,
phi_R0 = c(0, .5), phi_R1 = c(2, -.3))
plot(s)
plot(s, main = "lalala")
devtools::load_all(".")
plot(s)
devtools::load_all(".")
plot(s)
plot(s, main = "lala")
plot(s)
devtools::load_all(".")
plot(s)
plot(s, main = "lalala")
check()
install()
library(devtools)
devtools::load_all(".")
libary(covr)
library(covr)
package_coverage()
?hystar
?hystar_fit
sysfonts::font_add_google("Zilla Slab", "pf", regular.wt = 500)
library(sysfonts)
install.packages("sysfonts")
library(devtools)
z <- z_sim(100, 4)
devtools::load_all(".")
z <- z_sim(100, 4)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0, phi_R0 = 2, phi_R1 = 1)
fit <- hystar_fit(s$data)
plot(fit)
z <- z_sim(100, 4)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0, phi_R0 = 2, phi_R1 = 1)
fit <- hystar_fit(s$data)
plot(fit)
s <- hystar_sim(z = z, r = c(-.5, .5), d = 0, phi_R0 = -1, phi_R1 = 3)
fit <- hystar_fit(s$data)
plot(fit)
head(s$data)
hystar_fit()
hystar_fit(1:100)
plot(hystar_fit(1:100))
hystar_fit(NA)
hystar_fit("test")
hystar_fit(list(daan = 3))
is.vector(list())
library(devtools)
install()
devtools::load_all(".")
devtools::document()
?binom
?rbinom
1-250*999/1000
1-(250*999/1000)
250*999/1000
1-(250**(999/1000))
1-(250^(999/1000))
250^(999/1000)
999/1000
250^.999
.999*.999
1 - .999 ^ 250
citation(package = "hystar")
qnorm(.975, mean = 0, sd = 1)
usethis::use_pkgdown()
pkgdown::build_site()
packageVersion("hystar")
usethis::use_version()
devtools::load_all(".")
?hystar_fit
z <- z_sim(n_t = 200, n_switches = 5, start_regime = 1)
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 2, phi_R0 = c(0, .6), phi_R1 = 1)
fit <- hystar_fit(sim$data)
devtools::load_all(".")
fit <- hystar_fit(sim$data)
head(sim$data)
plot(sim)
fit <- hystar_fit(sim$data)
devtools::load_all(".")
fit <- hystar_fit(sim$data)
fit$st_errors
devtools::load_all(".")
fit <- hystar_fit(sim$data)
fit$st_errors
devtools::load_all(".")
fit <- hystar_fit(sim$data)
fit$st_errors
confint(fit)
coef(fit)
usethis::use_version()
?do.call
check()
devtools::check()
devtools::load_all(".")
fit
fit$tar
?mapply
?identity
