expect_error(z_sim(100, 4, 1, FALSE, 3, "a vector of length 2"))
})
test()
devtools::load_all(".")
test()
check()
devtools::check()
devtools::load_all(".")
?z_sim
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
test_that("Trailing zeros are correctly removed.", {
# Note that by default we want to keep the first value,
# regardless of its value!
expect_equal(remove_trailing_zeros(c(1, 2, 0, 0)),
c(1, 2))
expect_equal(remove_trailing_zeros(c(0, 0, 1, 3)),
c(0, 0, 1, 3))
expect_equal(remove_trailing_zeros(c(0, 0, 0, 0)),
0)
})
devtools::load_all(".")
test_that("order is correct", {
order <- get_order(coe = c(0, .4, .5))
expect_equal(order, 2)
order <- get_order(coe = c(0, .5, 0, 0))
expect_equal(order, 2)
order <- get_order(coe = c(0, 0, 0, 0))
expect_equal(order, 0)
})
test_that("order is correct", {
order <- get_order(coe = c(0, .4, .5))
expect_equal(order, 2)
order <- get_order(coe = c(0, .5, 0, 0))
expect_equal(order, 1)
order <- get_order(coe = c(0, 0, 0, 0))
expect_equal(order, 0)
})
test("test_helpers.R")
?test
test_active_file()
test_coverage_active_file()
test_coverage()
devtools::load_all(".")
hystar_sim(y = 2, z = 4, d = 1, phi_R0 = c(.3, .8), phi_R1 = 3)
hystar_sim(z = 4, d = 1, phi_R0 = c(.3, .8), phi_R1 = 3)
hystar_sim(z = 4:10, r = c(5, 7) d = 1, phi_R0 = c(.3, .8), phi_R1 = 3)
hystar_sim(z = 4:10, r = c(5, 7), d = 1, phi_R0 = c(.3, .8), phi_R1 = 3)
hystar_sim(z = 4:10, r = c(5, 7), d = 1, phi_R0 = c(.3, .8, . 4), phi_R1 = 3)
hystar_sim(z = 4:10, r = c(5, 7), d = 1, phi_R0 = c(.3, .8, .4), phi_R1 = 3)
devtools::load_all(".")
?hystar_sim
hystar_sim(z = 4:10, r = c(5, 7), d = 1, phi_R0 = c(.3, .8, .4, 0, 0), phi_R1 = 3)$orders
devtools::load_all(".")
hystar_sim(z = 4:10, r = c(5, 7), d = 1, phi_R0 = c(.3, .8, .4, 0, 0), phi_R1 = 3)$orders
devtools::check()
?axis
devtools::load_all(".")
sim
plot(sim)
devtools::load_all(".")
plot(sim)
devtools::load_all(".")
test_active_file()
test_that("switch points are correct", {
R <- c(0, 1, 1, 0, 1, 0, 0, 0, 1)
exp <- c(2, 4, 5, 6, 9)
expect_equal(get_sw_pnts(R), exp)
})
R <- c(0, 1, 1, 0, 1, 0, 0, 0, 1)
n <- length(R)
n
R <- c(0, 1, 1, 0, 1, 0, 0, 0, 1)
n <- length(R)
R <- R[2:n]
R_lag <- R[1:(n-1)]
S <- R - R_lag
S
R
R_lag
R
# Where are switches from 0 (1) to 1 (0)?
# We define a switch point as the time point where R is different
# from R at the previous time point.
# We don't want to use a slow for loop, so we vectorize the problem.
# Note that at a switch point s, R[s] - R[s-1] != 0.
# We compute S[t] = R[t] - R[t-1] and see were this is nonzero.
# We use the lagged version of R, so we add the first time
# point again (in which there can be no switch by definition).
n <- length(R)
R_t <- R[2:n]
R_lag <- R[1:(n-1)]
R_t
R_lag
R
S <- R_t - R_lag
S
sw_points <- which(S != 0)
sw_points
devtools::load_all(".")
test_that("switch points are correct", {
R <- c(0, 1, 1, 0, 1, 0, 0, 0, 1)
exp <- c(2, 4, 5, 6, 9)
expect_equal(get_sw_pnts(R), exp)
})
R_t
R_lag
S_ <- R_t - R_lag
devtools::load_all(".")
test_that("switch points are correct", {
R <- c(0, 1, 1, 0, 1, 0, 0, 0, 1)
exp <- c(2, 4, 5, 6, 9)
expect_equal(get_sw_pnts(R), exp)
})
test_that("switch point matrix is correct. Start 1, uneven switches", {
# switch points should be 2 3 4.
R <- c(1, 0, 1, 0, 0)
exp_mat <- matrix(c(1, 2,
3, 4),
ncol = 2, byrow = TRUE)
expect_equal(get_sw_pnts_mat(R), exp_mat)
})
test_that("switch point matrix is correct. Start 1, even switches", {
# switch points should be 2 3 4 5.
R <- c(1, 0, 1, 0, 1, 0)
exp_mat <- matrix(c(1, 2,
3, 4,
5, 6), # 6 is the last time point
ncol = 2, byrow = TRUE)
expect_equal(get_sw_pnts_mat(R), exp_mat)
})
test_that("switch point matrix is correct. Start 0, uneven switches", {
# switch points should be 2 3 4.
R <- c(0, 1, 0, 1, 1, 1)
exp_mat <- matrix(c(2, 3,
4, 6), # 6 is the last time point
ncol = 2, byrow = TRUE)
expect_equal(get_sw_pnts_mat(R), exp_mat)
})
test_that("switch point matrix is correct. Start 0, even switches", {
# switch points should be 2 3 4 5.
R <- c(0, 1, 0, 1, 0, 0)
exp_mat <- matrix(c(2, 3,
4, 5),
ncol = 2, byrow = TRUE)
expect_equal(get_sw_pnts_mat(R), exp_mat)
})
test_that("plot function does not return", {
z <- z_sim(n_t = 50, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(y = sim$data$y, z = z)
expect_equal(plot(sim), NULL)
expect_equal(plot(fit), NULL)
})
devtools::load_all(".")
test_active_file()
if (TRUE)
x <- 7
x
if (TRUE)
x <- 3
devtools::load_all(".")
test_active_file()
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
})
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(y = 1, z = 1, p_select = "a")
expect_equal(p_select, "aic")
})
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "a", r = c(2, 3), thin = TRUE
)
expect_equal(p_select, "aic")
})
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "a", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
?substitute
?env
substitute(x, env = parent.env())
substitute(x, env = parent.env(x))
?parent.env()
env
env()
current.env()
parent.env(.GlobalEnv)
attr(get_sw_pnts, "scrref")
attr(get_sw_pnts, "srcref")
body(get_sw_pnts)
devtools::load_all(".")
check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "a", r = c(.8, .9), thin = TRUE
)
check_char_arg("aic", c("aic", "aicc", "bic"))
check_char_arg("bla", c("aic", "aicc", "bic"))
fn_env(check_char_arg)
library(rlang)
fn_env(check_char_arg)
parent.env(.GlobalEnv)
parent.env(emptyenv())
A <- function(test) {
B(test)
}
B <- function(x) {
print(substitute(x))
}
B(3)
B(3)
B <- function(x) {
paste(substitute(x))
}
B(3)
B(x = 3)
a <- 2
B(a)
B(A(a))
a <- 2
B(A(a))
A <- function(test) {
B(test)
}
B <- function(x) {
paste(substitute(x))
}
a <- 2
B(A(a))
a <- "daan"
check_char_arg(a, c("hoi", "daan"))
check_char_arg(a, c("hoi", "sdd"))
B <- function(x) {
paste(substitute(x, env = parent.frame()))
}
a <- "daan"
B(A(a))
devtools::load_all(".")
check_char_arg(a, c("hoi", "sdd"))
hystar_fit(y = 1, z = 3, p_select = "bla")
?substitute
devtools::load_all(".")
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "a", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "a", r = c(.8, .9), thin = TRUE
)
check_p_select("ai")
match.arg("d", c("daan", "joe"))
devtools::load_all(".")
check_p_select("ai")
devtools::load_all(".")
check_p_select("ai")
devtools::load_all(".")
check_p_select("ai")
devtools::load_all(".")
check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "a", r = c(.8, .9), thin = TRUE
)
p_select = "a"
if (!is.character(p_select))
stop(paste0("`p_select` must be of type character."),
call. = FALSE)
choices <- c("aic", "aicc", "bic")
p_select <- tolower(p_select)
p_select
match.arg(
arg = p_select,
choices = choices
)
p_select
devtools::load_all(".")
match.arg(
arg = p_select,
choices = choices
)
check_p_select("ai")
?match.arg
library(devtools)
devtools::load_all(".")
check_p_select("a")
p_select = "a"
if (!is.character(p_select))
stop(paste0("`p_select` must be of type character."),
call. = FALSE)
choices <- c("aic", "aicc", "bic")
p_select <- tolower(p_select)
p_select
out <- tryCatch(
error = function(cond) {
stop(paste0("`p_select` must be one of these: ",
paste0(choices, collapse = ", "), "."),
call. = FALSE)
},
match.arg(
arg = p_select,
choices = choices
)
)
check_p_select("aicc")
devtools::load_all(".")
check_p_select("aicc")
check_p_select("ai")
check_p_select("b")
devtools::load_all(".")
test_that("p_select must be a valid choice", {
expect_error(hystar_fit(y = 1, z = 3, p_select = 1),
"character")
expect_error(hystar_fit(y = 1, z = 3, p_select = "bla"),
"aic")
p_select <- check_hystar_fit_input(
y = 1:4, z = 1:4, d = 1, p0 = 1, p1 = 1,
p_select = "aic", r = c(.8, .9), thin = TRUE
)
expect_equal(p_select, "aic")
})
test_active_file()
.Machine$double.eps
check_y("jaha")
check_z("jaja")
hystar_fit("hoi", "doei")
test_active_file()
devtools::load_all(".")
a <- matrix(9)
rownames(a) <- "test"
a
colnames(a) <- "test"
rownames(a) <- NULL
a
a[1, "test", drop = TRUE]
devtools::load_all(".")
check()
devtools::load_all(".")
z <- z_sim(n_t = 50, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(y = sim$data$y, z = z)
fit
x <- 4
names(x) <- "daan"
y <- 4
names(y) <- "hoi"
x
y
list(a = x)
unname(x, y)
x
?unname
test()
devtools::load_all(".")
test()
?hystar_fit
devtools::load_all(".")
test()
devtools::load_all(".")
test()
devtools::load_all(".")
test()
z <- z_sim(n_t = 200, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(y = sim$data$y, z = z)
expect_equal(summary(sim), NULL)
expect_equal(summary(fit), NULL)
devtools::check()
?hystar_fit
?hystar_fit
devtools::check()
?hystar_fit
?hystar_fit
?hystar_fit
?hystar_fit
?hystar_fit
?hystar_sim
usethis::use_lifecycle_badge("experimental")
seq(from = 1, to = 10.4, by = .5)
seq(from = 1, to = 10.4, by = 3)
z_sim
?z_sim
z <- z_sim(100, 5, 1)
ts.plot(z)
z <- z_sim(100, 6, 1)
ts.plot(z)
head(z)
z <- z_sim(100, 6, 1, T)
ts.plot(z)
ts.plot(z_sim(100, 6, 1, F))
ts.plot(z_sim(100, 6, 1, T))
?z_sim
z <- z_sim(50, 1, 1)
ts.plot(z)
z <- z_sim(50, 10, 1)
ts.plot(z)
head(z)
hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(0, .1, .1, .1, .1), phi_R1 = c(0, .1, .1, .1, .1), resvar = c(1, 1))
a <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(0, .1, .1, .1, .1), phi_R1 = c(0, .1, .1, .1, .1), resvar = c(1, 1))
head(a$data$R)
a <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(0, .1, .1, .1, .1, .1, .1), phi_R1 = c(0, .1, .1, .1, .1), resvar = c(1, 1))
head(a$data$R)
plot(a)
a$orders
z[6]
devtools::load_all(".")
a <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(0, .1, .1, .1, .1, .1, .1), phi_R1 = c(0, .1, .1, .1, .1), resvar = c(1, 1))
a
ts_hys(a, r0 = -.5, r1 = .5)
z
max(c(0, 4, 2), c(4, 3, 7))
-1:-10
devtools::load_all(".")
b <- simulate_cossin(50, 5, 1, F, F)
devtools::load_all(".")
a <- simulate_cossin(50, 5, 1, F, T)
a <- simulate_cossin(50, 5, 1, F, F)
a <- simulate_cossin(50, 5, 1, F, T)
b <- simulate_cossin(50, 5, 1, F, F)
a <- simulate_cossin(50, 5, 1, F, T)
a
b
devtools::load_all(".")
b <- simulate_cossin(50, 5, 1, F, F)
a <- simulate_cossin(50, 5, 1, F, T)
a
ts.plot(a)
ts.plot(c(a, b))
c(a, b)[10]
c(a, b)[11]
devtools::load_all(".")
devtools::load_all(".")
d <- simulate_cossin(50, 5, 1, F)
d == c(a, b)
devtools::load_all(".")
remove_z_buffer(z, 1, 1) == b
length(a)
length(b[11:length(b)])
length(b)
length(d)
length(d[11:length(d)])
z <- z_sim(50, 4, 1)
length(z)
z_r <- remove_z_buffer(z, 1, 1)
length(z_r)
z_r[1]
z_r <- remove_z_buffer(z, 4, 1)
z_r[1]
devtools::load_all(".")
z_r <- remove_z_buffer(z, 4, 1)
z_r[1]
z_r <- remove_z_buffer(z, 4, 1)
z_r <- remove_z_buffer(z, 4, 13)
z_r[1]
z_r <- remove_z_buffer(z, 4, 10)
z_r <- remove_z_buffer(z, 4, 20)
test_that("When z is simulated with hysteresis,
a certain start will raise a warning.", {
z <- z_sim(100, 5, start_regime = 0, start_hyst = TRUE)
expect_warning(hystar_sim(z = z, r = c(-.9, -.8), d = 1, phi_R0 = 0, phi_R1 = 0,
resvar = c(1, 1), start_regime = 1),
"used an hysteretic start")
})
install()
plot(fit)
