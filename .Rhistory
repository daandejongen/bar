})
devtools::load_all(".")
z
z <- z_sim(50, 2, 1)
z
z[11]
hystar_sim(z = z, r = 1:2, d = 1, phi_R0 = 1, phi_R1 = 1)
hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
length(out)
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
length(out)
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
out$k
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
out$z_del
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
lapply(out, length)
return(list(z, H, R, y))
z = z
r = c(-.5, .5)
d = 1
phi_R0 = 1
phi_R1 = 1
resvar = c(1, 1)
start_regime = NULL
temp <- check_hystar_sim_input(z, r, d, phi_R0, phi_R1, resvar, start_regime)
z <- temp$z
start_regime <- temp$start_regime
z
start_regime
check_hystar_sim_input(z, r, d, phi_R0, phi_R1, resvar, start_regime)
devtools::load_all(".")
test()
test_that("z buffer is correctly removed, d > p.", {
z <- z_sim(n_t = 50, n_switches = 3, start_regime = 1, start_hyst = TRUE)
z_r <- remove_z_buffer(z, d = 3, p0 = 1, p1 = 2)
expect_equal(z_r[1], 0)
expect_equal(z_r, z[11:60])
})
test_that("z buffer is correctly removed, d < p.", {
z <- z_sim(n_t = 50, n_switches = 3, start_regime = 1, start_hyst = FALSE)
z_r <- remove_z_buffer(z, d = 2, p0 = 1, p1 = 5)
expect_equal(z_r[5 + 1 - 2], 1)
})
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
out
lapply(out, length)
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
lapply(out, length)
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
lapply(out, length)
(1:50)[3:50]
(1:50)[4:50]
(1:50)[4:50 - 4]
3:20 - 2
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
lapply(out, length)
temp <- check_hystar_sim_input(z, r, d, phi_R0, phi_R1, resvar, start_regime)
z <- temp$z
start_regime <- temp$start
z
start_regime
z[11]
z[1]
phi_R0 <- remove_trailing_zeros(phi_R0)
phi_R1 <- remove_trailing_zeros(phi_R1)
p0 <- get_order(phi_R0)
p1 <- get_order(phi_R1)
k <- max(p0, p1, d)
k
(k + 1 - d):(length(z) - d)
(k):length(z) - d
z_del1 <- z[(k + 1 - d):(length(z) - d)]
z_del2 <- z[(k):length(z) - d]
z_del1
z_del2
(1:10)[1:5]
(1:10)[0:5]
devtools::load_all(".")
z <- z_sim(50, 3, 1)
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
out
lapply(out, length)
devtools::load_all(".")
out <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = 1, phi_R1 = 1)
length(out$z)
lapply(out$data, length)
plot(out)
plot(out)
out$data$R
out$data$z
R[7]
out$dataR[7]
out$data$R[7]
out$data$R[8]
out$data$R[13]
out$data$R[14]
out$data$R[29]
out$data$R[30]
test()
z <- z_sim(100, 5, start_regime = 0, start_hyst = TRUE)
hystar_sim(z = z, r = c(-.9, -.8), d = 1, phi_R0 = 0, phi_R1 = 0,
resvar = c(1, 1), start_regime = 1)
attr(z)
attributes(z)
z_r <- remove_z_buffer(z, d, p0, p1)
start_inferred <- get_start(g = c(d, r[1], r[2]), z, time_eff(z, d, p0, p1))
start_inferred <- get_start(g = c(1, -.9, -.8), z_r, time_eff(z_r, d, p0, p1))
start_inferred
ts.plot(z)
ts.plot(z_r)
check_start(start_inferred, start_regime = NULL, z = z_r)
start_regime = NULL
z_simulated <- is_z_simulated(z)
z_simulated <- is_z_simulated(z_r)
z_simulated
z_r
z
remove_z_buffer(z, d, p0, p1)
is_z_simulated(z)
z[3]
devtools::load_all(".")
remove_z_buffer(z, d, p0, p1)
z
devtools::load_all(".")
test_that("z buffer removal keeps original attributes.", {
z <- z_sim(30, 5, 1)
z_r <- remove_z_buffer(z)
expect_equal(attributes(z), attributes(z_r))
})
test_that("z buffer removal keeps original attributes.", {
z <- z_sim(30, 5, 1)
z_r <- remove_z_buffer(z, d = 2, p0 = 2, p1 = 1)
expect_equal(attributes(z), attributes(z_r))
})
test_that("When z is simulated with hysteresis,
a certain start will raise a warning.", {
z <- z_sim(100, 5, start_regime = 0, start_hyst = TRUE)
expect_warning(hystar_sim(z = z, r = c(-.9, -.8), d = 1, phi_R0 = 0, phi_R1 = 0,
resvar = c(1, 1)), "an hysteretic start")
})
test_that("When z is simulated with hysteresis,
a certain start will raise an error", {
z <- z_sim(100, 5, start_regime = 0, start_hyst = TRUE)
expect_error(hystar_sim(z = z, r = c(-.9, -.8), d = 1, phi_R0 = 0, phi_R1 = 0,
resvar = c(1, 1)), "an hysteretic start")
})
test_that("When z is not simulated, and there is no hysteresis,
starting regime gives warning if it does not match", {
z <- 1:10
expect_warning( # r makes start regime certainly 0
s <- hystar_sim(z = z, r = c(2, 4), d = 1, phi_R0 = 0, phi_R1 = 0,
start_regime = 1),
"`start_regime` is different from what is implied"
)
expect_equal(s$data$R[1], 0)
expect_warning( # r makes start regime certainly 0
s <- hystar_sim(z = z, r = c(2, 4), d = 1, phi_R0 = 0, phi_R1 = 0,
start_regime = 0),
NA
)
expect_equal(s$data$R[1], 0)
})
test_that("When z is not simulated, and there is hysteresis,
starting regime must be provided.", {
z <- c(5, 1:10)
s <- hystar_sim(z = z, r = c(2, 8), d = 1, phi_R0 = 0, phi_R1 = 0,
start_regime = 1)
expect_equal(s$data$R[1], 1)
expect_error(hystar_sim(z = z, r = c(2, 8), d = 1, phi_R0 = 0, phi_R1 = 0),
"`start_regime` was not provided")
})
test_that("start check will return inferred start if incorrect start was provided,
and warn that start_regime was ignored", {
expect_warning(start <- check_hystar_sim_input(z = 1:5, r = c(2, 3), d = 1,
phi_R0 = 0, phi_R1 = 0, resvar = c(1, 1),
start_regime = 9)
)
expect_equal(start, 0)
})
test_that("start check will return inferred start if incorrect start was provided,
and warn that start_regime was ignored", {
expect_warning(start <- check_hystar_sim_input(z = 1:5, r = c(2, 3), d = 1,
phi_R0 = 0, phi_R1 = 0, resvar = c(1, 1),
start_regime = 9)$start
)
expect_equal(start, 0)
})
test_that("start_hyst must be TRUE or FALSE", {
expect_error(check_start_hyst(NA), "TRUE or FALSE")
expect_error(check_start_hyst("a"), "TRUE or FALSE")
})
test_that("range input must be valid", {
expect_error(z_sim(100, 4, 1, FALSE, c(3, 1), "not larger than the first"))
expect_error(z_sim(100, 4, 1, FALSE, 3, "a vector of length 2"))
})
test_active_file()
test_that("sine/cosine simulation starts at right place", {
z <- simulate_cossin(n_t = 3, n_switches = 1,
start_regime = 0, start_hyst = FALSE)
expect_equal(z[11], -1) # There is a buffer of 10
z <- simulate_cossin(n_t = 3, n_switches = 1,
start_regime = 1, start_hyst = FALSE)
expect_equal(z[11], 1)
z <- simulate_cossin(n_t = 3, n_switches = 1,
start_regime = 0, start_hyst = TRUE)
expect_equal(z[11], 0)
})
devtools::load_all(".")
test()
(1:10)[]
test_that("z buffer is correctly removed, d > p.", {
z <- z_sim(n_t = 50, n_switches = 3, start_regime = 1, start_hyst = TRUE)
z_r <- remove_z_buffer(z, d = 3, p0 = 1, p1 = 2)
expect_equal(z_r[1], 0)
expect_equal(z_r[], z[11:60])
})
z <- z_sim(n_t = 50, n_switches = 3, start_regime = 1, start_hyst = TRUE)
z_r <- remove_z_buffer(z, d = 3, p0 = 1, p1 = 2)
z_r
z_r[]
test_that("z buffer is correctly removed, d > p.", {
z <- z_sim(n_t = 50, n_switches = 3, start_regime = 1, start_hyst = TRUE)
z_r <- remove_z_buffer(z, d = 3, p0 = 1, p1 = 2)
expect_equal(z_r[1], 0)
expect_equal(z_r[1:50], z[11:60])
})
devtools::load_all(".")
test()
check()
devtools::load_all(".")
check()
?z_sim
devtools::load_all(".")
check()
hystar_sim(z = 1:100, r = c(5, 76), d = 1, phi_R0 = c(0, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01, .01), phi_R1 = 0)
?z_sim
?hystar_sim
sim
z
sim <- hystar_sim(z = z, r = c(-.5, .5), phi_R0 = c(0, .4), phi_R1 = 1)
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 1, phi_R0 = c(0, .4), phi_R1 = 1)
plot(sim)
plot(sim)
?layout
devtools::load_all(".")
plot(sim)
?hystar_fit
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
summary(dit)
summary(fit)
fit(fit)
fit
devtools::load_all(".")
summary(fit)
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
summary(fit)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
summary(fit)
fit$orders
fit$delay
sim$d
fit <- hystar_fit(y = sim$data$y)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y)
devtools::load_all(".")
fit <- hystar_fit(y = sim$data$y)
devtools::load_all(".")
devtools::load_all(".")
hystar_sim(z = 1)
hystar_sim(z = 1, phi_r0 = 3)
hystar_sim(z = 1, phi_r0 = 1)
hystar_sim(z = 1:10, r = c(3, 5))
hystar_sim(z = 1:10, r = c(3, 5), phi_R0 = 4)
hystar_sim(z = 1:10, r = c(3, 5), phi_R0 = 4, phi_R1 = 1)
hystar_sim(z = 1:10, r = c(3, 5), phi_R0 = 4, phi_R1 = 1, d = 1)
hystar_fit(z = 4)
check()
install()
?hystar_sim
devtools::load_all(".")
z <- z_sim(n_t = 50, n_switches = 3,
start_regime = 1, start_hyst = TRUE,
range = c(-1, 1))
sim <- hystar_sim(z = z, r = c(-.5, .5), d = 5,
phi_R0 = c(0, .6), phi_R1 = c(1. -.3),
resvar = c(1, .9),
start_regime = 1)
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
(plot(sim)
)
plot(sim)
plot(2)
devtools::load_all(".")
plot(sim)
plot(2)
par(mfrow = c(2, 2))
plot(2)
par(mfrow = c(1,1))
plot(2)
?hystar_fit
?z_sim
z <- z_sim(100, n_switches = 4, start_regime = 1, start_hyst = FALSE)
ts.plot(z)
?hystar_sim
str(z)
?hystar_fit
?z_sim
# Simulation
z <- z_sim(100, 5, 1, TRUE)
ts.plot(z)
?hystar_sim
sim <- hystar_sim(z, r = c(-.5, .5),
phi_R0 = c(0, .3),
phi_R1 = c(-1, .6))
sim <- hystar_sim(z, r = c(-.5, .5),
phi_R0 = c(0, .3),
phi_R1 = c(-1, .6),
d = 1)
plot(sim)
plot(sim)
?hystar_fit
# Estimation
fit <- hystar_fit(y = sim$data$y, z = sim$data$z)
# Results
summary(fit)
coef(fit)
coef(fit)
plot(fit)
sim <- hystar_sim(z, r = c(-.5, .5),
phi_R0 = c(0, .3),
phi_R1 = c(0, .6),
d = 1,
resvar = c(.5, 1.5))
plot(sim)
sim <- hystar_sim(z, r = c(-.5, 0),
phi_R0 = c(0, .3),
phi_R1 = c(0, .6),
d = 1,
resvar = c(.5, 1.5))
plot(sim)
plot(sim)
acov_vec = 1:6
# This function will return the matrix
# E[x_t x_t^T]
# where x_t = (1, y[t-1], ..., y[t-p])
n <- length(acov_vec) + 1L
n
A <- matrix(raw(), nrow = n, ncol = n)
A
?raw
raw(10)
M <- matrix(acov_vec[abs(col(A) - row(A)) + 1L], n, n)
M
col(A)
row(A)
A[2:n, 2:2]
A <- matrix(raw(), nrow = n, ncol = n)
A[2:n, 2:n]
(1:6)[abs(col(A) - row(A)) + 1]
(1:6)[abs(col(A) - row(A))]
(1:4)[abs(col(A) - row(A))]
A <- matrix(raw(), nrow = 4, ncol = 4)
(1:4)[abs(col(A) - row(A))]
(1:4)[abs(col(A) - row(A))] + 1
(1:4)[abs(col(A) - row(A)) + 1]
col(A)
A
A[] <- 1:16
A <- matrix(NA, 4, 4)
A
A[] <- 1:16
A
A <- matrix(nrow = n, ncol = n)
acov_vec <- 1:4
A[] <- acov_vec[abs(col(A) - row(A)) + 1L]
A
A
A <- matrix(nrow = n, ncol = n)
A[] <- acov_vec[abs(col(A) - row(A)) + 1L]
A
A <- matrix(nrow = n, ncol = n)
acov_vec[abs(col(A) - row(A)) + 1L]
A
n=4
A <- matrix(nrow = n, ncol = n)
A
A[] <- acov_vec[abs(col(A) - row(A)) + 1L]
A
?mean
?arima.sim
y <- arima.sim(list(ar = c(0, .4)))
y <- arima.sim(list(ar = c(0, .4)), n = 100)
devtools::load_all(".")
compute_acov_vec(y, 4)
co <- compute_acov_vec(y, 4)
acf(y, 4)
acf(y, 4, plot = FALSE, tyope = "cova")
acf(y, 4, plot = FALSE, tyope = "covariaance")
acf(y, 4, plot = FALSE, tyope = "covariance")
acf(y, 4, plot = FALSE, type = "covariance")
co
var(y)
var(y) * 99 / 100
y
# This function will return the (p+1) by (p+1) matrix
# 1 m m m m
# m E[x_t x_t^T]
# m
# m
#
# where x_t = (x_{t-1}, x_{t-2}, ..., x_{t-p})
# and m is the mean of y
m <- mean(y)
acov_vec = compute_acov_vec(y, 4)
# Inner lower right part of the matrix, E[x_t x_t^T]
# note that acov_vec contains the autocovs of lag 0, 1, ..., p - 1.
p <- length(acov_vec)
p
A <- matrix(nrow = p, ncol = p)
A[] <- acov_vec[abs(col(A) - row(A)) + 1L] + m**2
A
acov_vec
m
y <- arima.sim(list(ar = c(2, .4)), n = 100)
?arima.sim
y <- y + 1
# This function will return the (p+1) by (p+1) matrix
# 1 m m m m
# m E[x_t x_t^T]
# m
# m
#
# where x_t = (x_{t-1}, x_{t-2}, ..., x_{t-p})
# and m is the mean of y
m <- mean(y)
m
acov_vec = compute_acov_vec(y, 4)
# Inner lower right part of the matrix, E[x_t x_t^T]
# note that acov_vec contains the autocovs of lag 0, 1, ..., p - 1.
p <- length(acov_vec)
A <- matrix(nrow = p, ncol = p)
A[] <- acov_vec[abs(col(A) - row(A)) + 1L] + m**2
A
acov_vec
# Outer part
M <- matrix(NA, nrow = p + 1, ncol = p + 1)
M[1, 1:(p + 1)] <- M[1:(p + 1), 1] <- c(1, rep(m, times = p))
M
# Filling inner part in outer part
M[2:(p + 1), 2:(p + 1)] <- A
M
install()
library(devtools)
install()
devtools::load_all(".")
?any
sim
z <- z_sim(100, 3, 1)
devtools::load_all(".")
library(devtools)
check()
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
library(testthat)
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
devtools::load_all(".")
test_that("z values are correct (with no thinning)", {
z <- 1:10
z_values <- get_z_values(z, r = c(.1, .9), thin = FALSE)
expect_equal(z_values, 2:9)
})
library(devtools)
devtools::load_all(".")
z <- z_sim(500, 8, 0, F)
s <- hystar_sim(z = z, r = c(-.3, .3), d = 1, c(0, .4), c(2, .7))
plot(s)
z <- z_sim(200, 20, 0, F)
s <- hystar_sim(z = z, r = c(-.3, .3), d = 1, c(0, .4), c(2, .7))
plot(s)
fit <- hystar_fit(y = s$data$y, z = s$data$z)
summary(fit)
s$data$R
z <- z_sim(200, 40, 0, F)
s <- hystar_sim(z = z, r = c(-.3, .3), d = 1, c(0, .4), c(2, .7))
fit <- hystar_fit(y = s$data$y, z = s$data$z)
summary(fit)
plot(fit)
plot(fit)
?combn
?perm
