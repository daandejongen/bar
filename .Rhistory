aa
a
unlist(l)
x <- 1:10
y <- data.frame(x, x, x, x)
y
lobstr::obj_size(x)
lobstr::obj_size(y)
lobstr::obj_size(list(x, x, x))
x <- df(c("a", "b", "c"))
x <- data.frame(c("a", "b", "c"))
x
x <- data.frame(a=c("a", "b", "c"))
x
str(x)
typeof(x)
typeof(x$a)
?data.frame
?I
class(I(3))
typeof("list")
typeof(list(1ยง))
typeof(list(1))
typeof(data.frame(1))
NROW(3)
dim(3)
class(data.frame(1))
class(list(1))
a <- data.frame()
a
a <- data.frame(p)
a <- data.frame(p=NULL)
a
a <- data.frame(a=1:3)
rownames(a) <- c("q", "q", "q")
a
a <- as.data.frame(matrix(1:9, ncol=3))
a
a$V1 <- c("a", "b", "c")
a
as.matrix(a)
?data.matrix
data.matrix(a)
a$V1 <- c("a", "b", "d")
data.matrix(a)
a
a[["V2"]]
a[["V2", drop=FALSE]]
a[,2,drop=F]
a[] <- 0
a
c(x = 1, y = 2, z = 3)[c("y", "z", "x")]
c(x = 1, y = 2, z = 3)
x <- c(2.1, 4.2, 3.3, 5.4)
order(x)
sort(x)
x[order(x)]
sort
factor("a")==1
factor("a")==1L
factor("a")
typeof(factor("a"))
?factor
lobstr::obj_size(c("a", "a", "a"))
lobstr::obj_size(c("a"))
lobstr::obj_size("a")
a <- list(1, 2, 3)
a
a[1]
a
x
x <- matrix(1:9, nrow=3)
a
x
x[2,2]
x[1,1]
?outer
x <- as.data.frame(x)
x[2]
x[,2]
x[,2,drop=F]
x[2,drop=T]
mtcars
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
x <- 1:5
x[NA]
x[NA_real_]
x[TRUE]
x[FALSE]
x[c(TRUE, TRUE)]
x <- outer(1:3, 1:3, FUN="*")
x
upper.tri(x)
upper.tri()
upper.tri(5)
?upper.tri
upper.tri(c(5,5))
array(1:8, dim = c(1,2,2))
x=array(1:8, dim = c(1,2,2))
is.matrix(a)
is.matrix
.Primitive("is.matrix")
d <- function(x){
stopifnot("x should be a matrix"= is.matrix(x),
"x should be square"= nrow(x)==ncol(x))
n <- length(x)
return(x[seq(1, n**2, by=n)])
}
a <- matrix(1:25, nrow=5)
a
d(a)
d <- function(x){
stopifnot("x should be a matrix"= is.matrix(x),
"x should be square"= nrow(x)==ncol(x))
n <- nrow(x)
return(x[seq(1, n**2, by=n)])
}
a <- matrix(1:25, nrow=5)
a
d(a)
seq(1, 25, 5)
d <- function(x){
stopifnot("x should be a matrix"= is.matrix(x),
"x should be square"= nrow(x)==ncol(x))
n <- nrow(x)
return(x[seq(1, n**2, by=n+1)])
}
a <- matrix(1:25, nrow=5)
a
d(a)
d <- function(x){
stopifnot("x should be a matrix"= is.matrix(x),
"x should be square"= nrow(x)==ncol(x))
n <- nrow(x)
s <- matrix(rep(1:n, each=2), ncol=2, byrow=TRUE)
return(x[s])
}
a <- matrix(1:25, nrow=5)
a
d(a)
a <- as.data.frame(a)
is.na(a)
a[2,3] <- NA
is.na(a)
a[is.na(a)] <- 3
a
1:5 == 1:5
outer(1:5, 1:5, FUN="==")
outer(1:5, FUN="==")
d <- function(x){
stopifnot("x should be a matrix"= is.matrix(x),
"x should be square"= nrow(x)==ncol(x))
return(x[outer(1:nrow(x), 1:nrow(x), FUN="==")])
}
a <- matrix(1:25, nrow=5)
a
d(a)
?data.table
install.packages("data.table")
library(data.table)
mtcars$cyl[3]
mtcars[["cyl"]][3]
mtcars[2,3]
mtcars[3,2]
?match
x <- c(2,2,5,2,1,4)
match(x, 2)
match(2, x)
match(2, 3)
?setdiff
?is.element
union(1:5, 3:10)
setdiff(1:5, 3:10)
setdiff(3:10, 1:5)
ifelse(TRUE, 1, "no")
ifelse(FALSE, 1, "no")
ifelse(NA, 1, "no")
if (5) "hoi" else "doei"
if (0) "hoi" else "doei"
if (-1) "hoi" else "doei"
?if
?ifelse
ifelse(2, 3, 4)
ifelse(0, 1, 2)
?seq_along
seq_along(1:4)
seq_along(4:9)
?vector
x <- list()
x[2]
x[2] <- 3
x
x[[3]]
`+`(1, `*`(2, 3))
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
f2 <- function(a, b) {
a * 10; b
}
f2(10, stop("This is an error!"))
formals(f2)
body(f2)
environment(f2)
attributes(f2)
`[`
`}`
?do.call
do.call
.Internal
.Primitive
match.fun("median")
match.fun("mode")
mode(c(1, 1, 1, 4, 2, 5))
?mean
(function(x) x+1)(9)
?function
()
is.primitive("mean")
is.primitive(mean)
is.primitive(mean())
mean
is.primitive(".Internal")
is.primitive(.Internal())
is.primitive(.Internal
)
is.primitive(sum)
is.function(sum)
?mget
get(mean)
get(x)
x
assign(x, 4)
assign("x", 4)
x
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
funs
str(funs)
funs[1]
formals(funs[2])
formals
typeof(mean)
formals(funs[[2]])
length(formals(funs[[2]]))
l <- lapply(funs, FUN=length(formals))
l <- lapply(funs, FUN=length(formals()))
l <- lapply(funs, FUN=formals())
l <- lapply(funs, FUN=formals
)
ll <- lapply(l, length)
argmax(ll)
which.max(ll)
scan
funs[1055]
length(formals(funs[[1055]]))
l[1055]
ll[1055]
ll[ll==0]
while
?UseMethod
Sys.info
?Sys.info
?sinpi
sinpi
rep
switch
formals(switch)
X <- ls("package:base")
X
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
formals(funs)
formals(funs[[1]])
formals(funs[1])
funs[[1]]
?apply
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.primitive, objs)
funs
Filter
?Filter
x <- 1:10
Filter("<4", x)
Filter(is.character, x)
Filter(is.double, x)
is.double(x[3])
x3
x[3]
typeof(x[3])
typeof(x)
x <- c(1,2,3)
y <- 1:3
typeof(x)
typeof(y)
isGeneric()
isGeneric(mean)
x <- 10
g01 <- function() {
x <- 20
x
}
g01()
x <- 1
g04 <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
g04()
library(codetools)
formals(sample)
args(sample)
?args
sample(3)
?sample
sample
typeof(length(1:3))
?&&
NULL
logical()
NULL==1
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
c(x, y)
}
f1()
y
?sum
?mean
sum
mean
is.primitive(mean)
plot.default()
plot.default
`+`
`<-`
`<-`(a, 2)
a
load()
?load
load
write.table
?write.table
`[[`
`[`
`{`
`}`
`names<-`
`#` <- function(x,y) x-y
x # y
x
y
3 # 2
`^` <- function(x,y) x-y
x ^ y
4^7
rm("^")
`+`(3, `+`(1, 2))
?ls
ls()
a <- list(1)
b <- list(1)
identical(a, b)
a ==b
globalenv()
environment()
current_env
current_env()
View(`#`)
View(a)
rm("#")
search()
rm(list=ls())
search()
base_env()
library(rlang)
base_env()
sd
file.remove
file.remove("asfsbvskjb")
getwd()
?sort
?combn
y <- double(100)
typeof(y)
is.numeric(y)
is.numeric(1:100)
library(devtools)
data_check <- function(y, z){
if (!is.numeric(y)) {
stop("y must be a numeric vector, \n
you have provided a vector of type ", typeof(y))
}
}
data_check(logical(100), double(3))
data_check <- function(y, z){
if (!is.numeric(y)) {
stop("y must be a numeric vector,
but you have provided a vector of type ", typeof(y))
}
}
data_check(logical(100), double(3))
data_check <- function(y, z){
if (!is.numeric(y)) {
stop("y must be a numeric vector, \\
but you have provided a vector of type ", typeof(y))
}
}
data_check(logical(100), double(3))
data_check <- function(y, z){
if (!is.numeric(y)) {
stop("y must be a numeric vector, \\
but you have provided a vector of type ", typeof(y),
call.=FALSE)
}
}
data_check(logical(100), double(3))
data_check <- function(y, z){
if (!is.numeric(y)) {
stop(paste0("y must be a numeric vector,
but you have provided a vector of type ",
typeof(y)),
call.=FALSE)
}
}
data_check(logical(100), double(3))
data_check <- function(y, z){
if (!is.numeric(y)) {
stop(paste0("y must be a numeric vector, \n",
"but you have provided a vector of type ",
typeof(y)),
call.=FALSE)
}
}
data_check(logical(100), double(3))
data_check <- function(y, z){
if (!is.numeric(y)) {
stop(paste0("`y` must be a numeric vector. \n",
"you have provided a vector of type ",
typeof(y)), ".",
call.=FALSE)
}
}
data_check(logical(100), double(3))
typeof(3.2, F)
typeof(c(3.2, F))
?is.integer
?is.wholenumber
.Machine$double.eps
c(1,2,3) <2
?all
?percentile
?quantile
get(wd)
getwd()
setwd("~pkg/bar")
setwd("~pkg/bar/")
setwd("~/pkg/bar/")
getwd()
create_package()
create_package("/Users/daandejong/pkg/bar")
is.numeric(list(1,2))
load_all()
library(devtools)
proj_path()
getwd()
load_all()
?exists
y <- numeric(2)
z <- numeric(3)
check_data(y, z)
z <- logical(2)
check_data(y, z)
?enexpr
load_all()
check_data(y, z)
expr(y-z)
library(rlang)
expr(y-z)
sample(5)
?sample
sample(x=1:5, size=5, replace=TRUE)
?enquo
load_all()
check_data(y, z)
?quote
load_all()
check_data(y, z)
?expr
?expression
expression(z + y)
rlang::expr(z + y)
eval(expression(z + y))
y + z
library(lobstr)
