data$H
H[!is.na(H)][1]
data$H[!is.na(data$H)][1]
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
devtools::load_all(".")
plot(data)
328* 6 + 329 * 5
compute_aicc <- function(rv, n0, n1, p0, p1) {
value <- n0*log(rv[1]) + 2*n0*(p0 + 2)/(n0-p0-3) +
n1*log(rv[2]) + 2*n1*(p1 + 2)/(n1-p1-3)
}
a <- c("test" = 1, "lalala" = 3)
a
a["test"]
devtools::load_all(".")
# Estimating the model
fit <- barfit(y = sim$data$y,
z = sim$data$z,
d = 1,
p0 = 1,
p1 = 1,
r = c(.1, .9))
fit$ic
3<=3
a <- c(.2, .4, 1, 0, .9)
all(0 <= a & 1 >= a)
?quantile
a = matrix(1:8, ncol = 2)
matrix(a, ncol = 2)
matrix(matrix(a, ncol = 2))
matrix(matrix(a, ncol = 2), ncol = 2)
a
is.vector(a)
b <- 1:5
is.vector(b)
r <- matrix(1)
length(r) == 2 || ncol(r) == 2
r <- matrix(1, ncol =2)
length(r) == 2 || ncol(r) == 2
"blablablabla"
a <- "blabla
aslbdjb"
quantile(1:5, c(3, 5))
a
a <- matrix(1:8, cnol = 4)
a <- matrix(1:8, ncol = 4)
all(a < 4)
all(a < 10)
devtools::load_all(".")
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z, 2),
d = 1,
p0 = 1,
p1 = 1,
r = c(.1, .9))
devtools::load_all(".")
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z, 2),
d = 1,
p0 = 1,
p1 = 1,
r = c(.1, .9))
devtools::load_all(".")
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z, 2),
d = 1,
p0 = 1,
p1 = 1,
r = c(.1, .9))
# Estimating the model
fit <- barfit(y = "sim$data$y",
z = c(sim$data$z, 2),
d = 1,
p0 = 1,
p1 = 1,
r = c(.1, .9))
devtools::load_all(".")
# Estimating the model
fit <- barfit(y = "sim$data$y",
z = c(sim$data$z, 2),
d = 1,
p0 = 1,
p1 = 1,
r = c(.1, .9))
! 4 == 4 && 5 == 5 && 7 == 7
! 4 == 4 && 5 == 5 && 7 == 8
! (4 == 4 && 5 == 5 && 7 == 8)
test_that("unequal length of y and z throws error", {
y <- numeric(1)
z <- numeric(2)
expect_error(check_data(y, z), "y and z must be of equal length")
})
expect_error(check_data(y, z), "must be of equal length")
test_that("unequal length of y and z throws error", {
y <- numeric(1)
z <- numeric(2)
expect_error(check_data(y, z), "must be of equal length")
})
test_that("unequal length of y and z throws error", {
y <- numeric(1)
z <- numeric(2)
expect_error(check_data(y, z), "must be of equal length")
})
test_that("delay and orders should be whole numbers", {
expect_error(check_dp(d = 1, p0 = 1.5, p1 = 9), "whole numbers")
})
test_that("delay and orders should be non-negative", {
expect_error(check_dp(d = 1, p0 = -1, p1 = 0), "whole numbers")
})
expect_error(check_dp(d = 1, p0 = -1, p1 = 0), "non-negative")
test_that("delay and orders should be non-negative", {
expect_error(check_dp(d = 1, p0 = -1, p1 = 0), "non-negative")
})
check_dp(d = 1, p0 = -1, p1 = 0)
devtools::load_all(".")
test_that("delay and orders should be non-negative", {
expect_error(check_dp(d = 1, p0 = -1, p1 = 0), "non-negative")
})
test_that("delay and orders should be whole numbers", {
expect_error(check_dp(d = 1, p0 = 1.5, p1 = 9), "whole numbers")
})
check_dp(d = 1, p0 = -1, p1 = 0)
expect_error(check_r_type("qua", r = matrix(ncol = 3)), "2 columns")
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
matrix(1, ncol = 3)
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
test_that("invalid r throws correct error.", {
expect_error(check_r_type("qua", r = 1), "length must be 2")
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
})
check_r_type("qua", r = matrix(1, ncol = 3))
devtools::load_all(".")
check_r_type("qua", r = matrix(1, ncol = 3))
devtools::load_all(".")
check_r_type("qua", r = matrix(1, ncol = 3))
devtools::load_all(".")
check_r_type("qua", r = matrix(1, ncol = 3))
test_that("invalid r throws correct error.", {
expect_error(check_r_type("qua", r = 1), "length must be 2")
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("quar", r = matrix(1, ncol = 3)), "must be")
})
test_that("invalid r throws correct error.", {
expect_error(check_r_type("qua", r = 1), "length must be 2")
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("quar", r = matrix(1, ncol = 3)), "must be")
})
devtools::load_all(".")
test_that("invalid r throws correct error.", {
expect_error(check_r_type("qua", r = 1), "length must be 2")
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("quar", r = matrix(1, ncol = 3)), "must be")
})
check_r_type("quar", r = matrix(1, ncol = 3))
test_that("invalid r throws correct error.", {
expect_error(check_r_type("qua", r = 1), "length must be 2")
expect_error(check_r_type("qua", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
})
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
})
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
})
check_r_type("q", r = c(1, 2))
r = c(1, 3)
!all(0 <= r | r <= 1)
all(0 <= r | r <= 1)
0 <= r
r <= 1
0 <= r & r <= 1
!all(0 <= r & r <= 1)
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
})
devtools::load_all(".")
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
})
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
})
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "be in [0, 1]")
expect_error(check_r_type("q", r = c(1, 2)), "so the values")
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "so the values")
})
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "so the values")
expect_error(check_r_type("s", r = c(1, 9), z = 1:4), "so the values")
})
expect_error(check_r_type("s", r = c(1, 9), z = 1:4), "so the values")
check_r_type("s", r = c(1, 9), z = 1:4)
devtools::load_all(".")
check_r_type("s", r = c(1, 9), z = 1:4)
devtools::load_all(".")
test_that("invalid r throws correct error.", {
expect_error(check_r_type("q", r = 1), "length must be 2")
expect_error(check_r_type("q", r = matrix(1, ncol = 3)), "2 columns")
expect_error(check_r_type("q", r = c(2, 1)), "larger than")
expect_error(check_r_type("quar", r = c(1, 2)), "must be")
expect_error(check_r_type("q", r = c(1, 2)), "so the values")
expect_error(check_r_type("s", r = c(1, 9), z = 1:4), "so the values")
})
test_that("Simulation inputs must be valid", {
z <- 1:10
d <- 4
r <- c(3, 6)
phi <- c(.3, .1)
psi <- c(.6, .2, 0)
resvar <- c(2, 3)
init_vals <- 1:4
start_regime <- NULL
expect_error(check_sim_input(z, d, r, phi, psi = 2*psi, resvar,
init_vals, start_regime),
"Autoregressive coefficients in 'phi'")
expect_error(check_sim_input(z, d, r, phi, psi, resvar = -resvar,
init_vals, start_regime),
"Residual variance")
expect_error(check_sim_input(z, d, r, phi, psi, resvar = resvar,
init_vals = 1:3, start_regime),
"Too few")
expect_error(check_sim_input(z, d, r = c(-10, 20), phi, psi, resvar,
init_vals, start_regime),
"A starting regime is needed")
})
a, b <- c(3, 4)
a <- Inf
a < Inf
devtools::load_all(".")
sim$data
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z),
d = 202,
p0 = 1,
p1 = 1,
r = c(.1, .9))
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z),
d = 199,
p0 = 1,
p1 = 1,
r = c(.1, .9))
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z),
d = 190,
p0 = 1,
p1 = 1,
r = c(.1, .9))
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z),
d = 180,
p0 = 1,
p1 = 1,
r = c(.1, .9))
# Estimating the model
fit <- barfit(y = sim$data$y,
z = c(sim$data$z),
d = 150,
p0 = 1,
p1 = 1,
r = c(.1, .9))
fit
fit$coefficients
sim
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi          = c(0, .3, .3, .4),
psi          = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 8)
?arima
?arima.sim
x <- arima.sim(ar = c(.2, .2, .6), n = 200)
x <- arima.sim(model = list(ar = c(.2, .2, .6)), n = 200)
x <- arima.sim(model = list(ar = c(.2, .2, .66)), n = 200)
x <- arima.sim(model = list(ar = c(.2, .2, .59)), n = 200)
argmax(c(1, 5, 2, 67, 2))
which.max(c(1, 5, 2, 67, 2))
which.max(1, 5, 2, 67, 2)
?substitute
! 3 %in% c(0, 1)
is.numeric(c(]))
is.numeric(c())
is.numeric(NULL)
paste0(c(1, 2, 3))
devtools::load_all(".")
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi          = c(0, .3, .3, .4),
psi          = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
start_regime = 1,
length       = 200,
n_switches   = 8)
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi          = c(0, .3, .3, .4),
psi          = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
length       = 200,
n_switches   = 8,
start_regime = 1)
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .4),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
length       = 200,
n_switches   = 8,
start_regime = 1)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .4),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
length       = 200,
n_switches   = 8,
start_regime = 1)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .4),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
length       = 200,
n_switches   = 8,
start_regime = 1)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .4),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .45),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .45),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .45),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
sim
devtools::load_all(".")
sim
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3, .45),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
sim
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
sim
devtools::load_all(".")
# Simulating data
sim <- barsim(r            = c(-.5, .5),
d            = 2,
phi_R0       = c(0, .3, .3),
phi_R1       = c(1, .5),
resvar       = c(1, 1),
init_vals    = NULL,
n_t          = 200,
n_switches   = 8,
start_regime = 1)
sim
plot(sim$data)
test_that()
testthat::use_r()
usethis::use_r()
usethis::use_test()
usethis::use_test()
usethis::use_r()
usethis::use_test()
usethis::use_test()
usethis::use_test()
devtools::load_all(".")
a <- matrix(1:2, ncol = 2)
a
c(a)
?c
as.vector(a)
a[1, ]
